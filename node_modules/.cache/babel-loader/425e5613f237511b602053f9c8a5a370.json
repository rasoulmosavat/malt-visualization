{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VERSION_IN_DEV = exports.VERSION_4_0_0 = exports.VERSION_3_5_0 = exports.VERSION_3_4_0 = exports.VERSION_3_2_0 = exports.ServerVersion = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _util = require(\"./util\");\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar SERVER_VERSION_REGEX = new RegExp('^(Neo4j/)?(\\\\d+)\\\\.(\\\\d+)(?:\\\\.)?(\\\\d*)(\\\\.|-|\\\\+)?([0-9A-Za-z-.]*)?$');\nvar NEO4J_IN_DEV_VERSION_STRING = 'Neo4j/dev';\n\nvar ServerVersion = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {number} major the major version number.\n   * @param {number} minor the minor version number.\n   * @param {number} patch the patch version number.\n   * @param {string} the original version string\n   */\n  function ServerVersion(major, minor, patch, originalVersionString) {\n    (0, _classCallCheck2[\"default\"])(this, ServerVersion);\n    this.major = major;\n    this.minor = minor;\n    this.patch = patch;\n    this._originalVersionString = originalVersionString;\n  }\n  /**\n   * Fetch server version using the given driver.\n   * @param {Driver} driver the driver to use.\n   * @return {Promise<ServerVersion>} promise resolved with a {@link ServerVersion} object or rejected with error.\n   */\n\n\n  (0, _createClass2[\"default\"])(ServerVersion, [{\n    key: \"compareTo\",\n\n    /**\n     * Compare this version to the given one.\n     * @param {ServerVersion} other the version to compare with.\n     * @return {number} value 0 if this version is the same as the given one, value less then 0 when this version\n     * was released earlier than the given one and value greater then 0 when this version was released after\n     * than the given one.\n     */\n    value: function compareTo(other) {\n      var result = compareInts(this.major, other.major);\n\n      if (result === 0) {\n        result = compareInts(this.minor, other.minor);\n\n        if (result === 0) {\n          result = compareInts(this.patch, other.patch);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (this._originalVersionString) {\n        return this._originalVersionString;\n      }\n\n      return \"\".concat(this.major, \".\").concat(this.minor, \".\").concat(this.patch);\n    }\n  }], [{\n    key: \"fromDriver\",\n    value: function fromDriver(driver) {\n      var session = driver.session();\n      return session.run('RETURN 1').then(function (result) {\n        return session.close().then(function () {\n          return ServerVersion.fromString(result.summary.server.version);\n        });\n      });\n    }\n    /**\n     * Parse given string to a {@link ServerVersion} object.\n     * @param {string} versionStr the string to parse.\n     * @return {ServerVersion} version for the given string.\n     * @throws Error if given string can't be parsed.\n     */\n\n  }, {\n    key: \"fromString\",\n    value: function fromString(versionStr) {\n      if (!versionStr) {\n        return new ServerVersion(3, 0, 0);\n      }\n\n      (0, _util.assertString)(versionStr, 'Neo4j version string');\n\n      if (versionStr.toLowerCase() === NEO4J_IN_DEV_VERSION_STRING.toLowerCase()) {\n        return VERSION_IN_DEV;\n      }\n\n      var version = versionStr.match(SERVER_VERSION_REGEX);\n\n      if (!version) {\n        throw new Error(\"Unparsable Neo4j version: \".concat(versionStr));\n      }\n\n      var major = parseIntStrict(version[2]);\n      var minor = parseIntStrict(version[3]);\n      var patch = parseIntStrict(version[4] || 0);\n      return new ServerVersion(major, minor, patch, versionStr);\n    }\n  }]);\n  return ServerVersion;\n}();\n\nexports.ServerVersion = ServerVersion;\n\nfunction parseIntStrict(str, name) {\n  var value = parseInt(str, 10);\n\n  if (!value && value !== 0) {\n    throw new Error(\"Unparsable number \".concat(name, \": '\").concat(str, \"'\"));\n  }\n\n  return value;\n}\n\nfunction compareInts(x, y) {\n  return x < y ? -1 : x === y ? 0 : 1;\n}\n\nvar VERSION_3_2_0 = ServerVersion.fromString('Neo4j/3.2.0');\nexports.VERSION_3_2_0 = VERSION_3_2_0;\nvar VERSION_3_4_0 = ServerVersion.fromString('Neo4j/3.4.0');\nexports.VERSION_3_4_0 = VERSION_3_4_0;\nvar VERSION_3_5_0 = ServerVersion.fromString('Neo4j/3.5.0');\nexports.VERSION_3_5_0 = VERSION_3_5_0;\nvar VERSION_4_0_0 = ServerVersion.fromString('Neo4j/4.0.0');\nexports.VERSION_4_0_0 = VERSION_4_0_0;\nvar maxVer = Number.MAX_SAFE_INTEGER;\nvar VERSION_IN_DEV = new ServerVersion(maxVer, maxVer, maxVer, NEO4J_IN_DEV_VERSION_STRING);\nexports.VERSION_IN_DEV = VERSION_IN_DEV;","map":{"version":3,"sources":["d:/webback/pro5/node_modules/neo4j-driver/lib/internal/server-version.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","VERSION_IN_DEV","VERSION_4_0_0","VERSION_3_5_0","VERSION_3_4_0","VERSION_3_2_0","ServerVersion","_classCallCheck2","_createClass2","_util","SERVER_VERSION_REGEX","RegExp","NEO4J_IN_DEV_VERSION_STRING","major","minor","patch","originalVersionString","_originalVersionString","key","compareTo","other","result","compareInts","toString","concat","fromDriver","driver","session","run","then","close","fromString","summary","server","version","versionStr","assertString","toLowerCase","match","Error","parseIntStrict","str","name","parseInt","x","y","maxVer","Number","MAX_SAFE_INTEGER"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VERSION_IN_DEV = exports.VERSION_4_0_0 = exports.VERSION_3_5_0 = exports.VERSION_3_4_0 = exports.VERSION_3_2_0 = exports.ServerVersion = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _util = require(\"./util\");\n\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SERVER_VERSION_REGEX = new RegExp('^(Neo4j/)?(\\\\d+)\\\\.(\\\\d+)(?:\\\\.)?(\\\\d*)(\\\\.|-|\\\\+)?([0-9A-Za-z-.]*)?$');\nvar NEO4J_IN_DEV_VERSION_STRING = 'Neo4j/dev';\n\nvar ServerVersion =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {number} major the major version number.\n   * @param {number} minor the minor version number.\n   * @param {number} patch the patch version number.\n   * @param {string} the original version string\n   */\n  function ServerVersion(major, minor, patch, originalVersionString) {\n    (0, _classCallCheck2[\"default\"])(this, ServerVersion);\n    this.major = major;\n    this.minor = minor;\n    this.patch = patch;\n    this._originalVersionString = originalVersionString;\n  }\n  /**\n   * Fetch server version using the given driver.\n   * @param {Driver} driver the driver to use.\n   * @return {Promise<ServerVersion>} promise resolved with a {@link ServerVersion} object or rejected with error.\n   */\n\n\n  (0, _createClass2[\"default\"])(ServerVersion, [{\n    key: \"compareTo\",\n\n    /**\n     * Compare this version to the given one.\n     * @param {ServerVersion} other the version to compare with.\n     * @return {number} value 0 if this version is the same as the given one, value less then 0 when this version\n     * was released earlier than the given one and value greater then 0 when this version was released after\n     * than the given one.\n     */\n    value: function compareTo(other) {\n      var result = compareInts(this.major, other.major);\n\n      if (result === 0) {\n        result = compareInts(this.minor, other.minor);\n\n        if (result === 0) {\n          result = compareInts(this.patch, other.patch);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (this._originalVersionString) {\n        return this._originalVersionString;\n      }\n\n      return \"\".concat(this.major, \".\").concat(this.minor, \".\").concat(this.patch);\n    }\n  }], [{\n    key: \"fromDriver\",\n    value: function fromDriver(driver) {\n      var session = driver.session();\n      return session.run('RETURN 1').then(function (result) {\n        return session.close().then(function () {\n          return ServerVersion.fromString(result.summary.server.version);\n        });\n      });\n    }\n    /**\n     * Parse given string to a {@link ServerVersion} object.\n     * @param {string} versionStr the string to parse.\n     * @return {ServerVersion} version for the given string.\n     * @throws Error if given string can't be parsed.\n     */\n\n  }, {\n    key: \"fromString\",\n    value: function fromString(versionStr) {\n      if (!versionStr) {\n        return new ServerVersion(3, 0, 0);\n      }\n\n      (0, _util.assertString)(versionStr, 'Neo4j version string');\n\n      if (versionStr.toLowerCase() === NEO4J_IN_DEV_VERSION_STRING.toLowerCase()) {\n        return VERSION_IN_DEV;\n      }\n\n      var version = versionStr.match(SERVER_VERSION_REGEX);\n\n      if (!version) {\n        throw new Error(\"Unparsable Neo4j version: \".concat(versionStr));\n      }\n\n      var major = parseIntStrict(version[2]);\n      var minor = parseIntStrict(version[3]);\n      var patch = parseIntStrict(version[4] || 0);\n      return new ServerVersion(major, minor, patch, versionStr);\n    }\n  }]);\n  return ServerVersion;\n}();\n\nexports.ServerVersion = ServerVersion;\n\nfunction parseIntStrict(str, name) {\n  var value = parseInt(str, 10);\n\n  if (!value && value !== 0) {\n    throw new Error(\"Unparsable number \".concat(name, \": '\").concat(str, \"'\"));\n  }\n\n  return value;\n}\n\nfunction compareInts(x, y) {\n  return x < y ? -1 : x === y ? 0 : 1;\n}\n\nvar VERSION_3_2_0 = ServerVersion.fromString('Neo4j/3.2.0');\nexports.VERSION_3_2_0 = VERSION_3_2_0;\nvar VERSION_3_4_0 = ServerVersion.fromString('Neo4j/3.4.0');\nexports.VERSION_3_4_0 = VERSION_3_4_0;\nvar VERSION_3_5_0 = ServerVersion.fromString('Neo4j/3.5.0');\nexports.VERSION_3_5_0 = VERSION_3_5_0;\nvar VERSION_4_0_0 = ServerVersion.fromString('Neo4j/4.0.0');\nexports.VERSION_4_0_0 = VERSION_4_0_0;\nvar maxVer = Number.MAX_SAFE_INTEGER;\nvar VERSION_IN_DEV = new ServerVersion(maxVer, maxVer, maxVer, NEO4J_IN_DEV_VERSION_STRING);\nexports.VERSION_IN_DEV = VERSION_IN_DEV;"]},"metadata":{},"sourceType":"script"}