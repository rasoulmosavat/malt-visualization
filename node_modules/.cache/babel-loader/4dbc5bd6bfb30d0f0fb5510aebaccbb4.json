{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar util = _interopRequireWildcard(require(\"./util\"));\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar BOOKMARKS_KEY = 'bookmarks';\n\nvar Bookmark = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {string|string[]} values single bookmark as string or multiple bookmarks as a string array.\n   */\n  function Bookmark(values) {\n    (0, _classCallCheck2[\"default\"])(this, Bookmark);\n    this._values = asStringArray(values);\n  }\n\n  (0, _createClass2[\"default\"])(Bookmark, [{\n    key: \"isEmpty\",\n\n    /**\n     * Check if the given bookmark is meaningful and can be send to the database.\n     * @return {boolean} returns `true` bookmark has a value, `false` otherwise.\n     */\n    value: function isEmpty() {\n      return this._values.length === 0;\n    }\n    /**\n     * Get all bookmark values as an array.\n     * @return {string[]} all values.\n     */\n\n  }, {\n    key: \"values\",\n    value: function values() {\n      return this._values;\n    }\n    /**\n     * Get this bookmark as an object for begin transaction call.\n     * @return {Object} the value of this bookmark as object.\n     */\n\n  }, {\n    key: \"asBeginTransactionParameters\",\n    value: function asBeginTransactionParameters() {\n      if (this.isEmpty()) {\n        return {};\n      } // Driver sends {bookmark: \"max\", bookmarks: [\"one\", \"two\", \"max\"]} instead of simple\n      // {bookmarks: [\"one\", \"two\", \"max\"]} for backwards compatibility reasons. Old servers can only accept single\n      // bookmark that is why driver has to parse and compare given list of bookmarks. This functionality will\n      // eventually be removed.\n\n\n      return (0, _defineProperty2[\"default\"])({}, BOOKMARKS_KEY, this._values);\n    }\n  }], [{\n    key: \"empty\",\n    value: function empty() {\n      return EMPTY_BOOKMARK;\n    }\n  }]);\n  return Bookmark;\n}();\n\nexports[\"default\"] = Bookmark;\nvar EMPTY_BOOKMARK = new Bookmark(null);\n/**\n * Converts given value to an array.\n * @param {string|string[]|Array} [value=undefined] argument to convert.\n * @return {string[]} value converted to an array.\n */\n\nfunction asStringArray(value) {\n  if (!value) {\n    return [];\n  }\n\n  if (util.isString(value)) {\n    return [value];\n  }\n\n  if (Array.isArray(value)) {\n    var result = [];\n    var flattenedValue = flattenArray(value);\n\n    for (var i = 0; i < flattenedValue.length; i++) {\n      var element = flattenedValue[i]; // if it is undefined or null, ignore it\n\n      if (element !== undefined && element !== null) {\n        if (!util.isString(element)) {\n          throw new TypeError(\"Bookmark value should be a string, given: '\".concat(element, \"'\"));\n        }\n\n        result.push(element);\n      }\n    }\n\n    return result;\n  }\n\n  throw new TypeError(\"Bookmark should either be a string or a string array, given: '\".concat(value, \"'\"));\n}\n/**\n * Recursively flattens an array so that the result becomes a single array\n * of values, which does not include any sub-arrays\n *\n * @param {Array} value\n */\n\n\nfunction flattenArray(values) {\n  return values.reduce(function (dest, value) {\n    return Array.isArray(value) ? dest.concat(flattenArray(value)) : dest.concat(value);\n  }, []);\n}","map":{"version":3,"sources":["d:/webback/pro5/node_modules/neo4j-driver/lib/internal/bookmark.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","_defineProperty2","_classCallCheck2","_createClass2","util","BOOKMARKS_KEY","Bookmark","values","_values","asStringArray","key","isEmpty","length","asBeginTransactionParameters","empty","EMPTY_BOOKMARK","isString","Array","isArray","result","flattenedValue","flattenArray","i","element","undefined","TypeError","concat","push","reduce","dest"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar util = _interopRequireWildcard(require(\"./util\"));\n\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar BOOKMARKS_KEY = 'bookmarks';\n\nvar Bookmark =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {string|string[]} values single bookmark as string or multiple bookmarks as a string array.\n   */\n  function Bookmark(values) {\n    (0, _classCallCheck2[\"default\"])(this, Bookmark);\n    this._values = asStringArray(values);\n  }\n\n  (0, _createClass2[\"default\"])(Bookmark, [{\n    key: \"isEmpty\",\n\n    /**\n     * Check if the given bookmark is meaningful and can be send to the database.\n     * @return {boolean} returns `true` bookmark has a value, `false` otherwise.\n     */\n    value: function isEmpty() {\n      return this._values.length === 0;\n    }\n    /**\n     * Get all bookmark values as an array.\n     * @return {string[]} all values.\n     */\n\n  }, {\n    key: \"values\",\n    value: function values() {\n      return this._values;\n    }\n    /**\n     * Get this bookmark as an object for begin transaction call.\n     * @return {Object} the value of this bookmark as object.\n     */\n\n  }, {\n    key: \"asBeginTransactionParameters\",\n    value: function asBeginTransactionParameters() {\n      if (this.isEmpty()) {\n        return {};\n      } // Driver sends {bookmark: \"max\", bookmarks: [\"one\", \"two\", \"max\"]} instead of simple\n      // {bookmarks: [\"one\", \"two\", \"max\"]} for backwards compatibility reasons. Old servers can only accept single\n      // bookmark that is why driver has to parse and compare given list of bookmarks. This functionality will\n      // eventually be removed.\n\n\n      return (0, _defineProperty2[\"default\"])({}, BOOKMARKS_KEY, this._values);\n    }\n  }], [{\n    key: \"empty\",\n    value: function empty() {\n      return EMPTY_BOOKMARK;\n    }\n  }]);\n  return Bookmark;\n}();\n\nexports[\"default\"] = Bookmark;\nvar EMPTY_BOOKMARK = new Bookmark(null);\n/**\n * Converts given value to an array.\n * @param {string|string[]|Array} [value=undefined] argument to convert.\n * @return {string[]} value converted to an array.\n */\n\nfunction asStringArray(value) {\n  if (!value) {\n    return [];\n  }\n\n  if (util.isString(value)) {\n    return [value];\n  }\n\n  if (Array.isArray(value)) {\n    var result = [];\n    var flattenedValue = flattenArray(value);\n\n    for (var i = 0; i < flattenedValue.length; i++) {\n      var element = flattenedValue[i]; // if it is undefined or null, ignore it\n\n      if (element !== undefined && element !== null) {\n        if (!util.isString(element)) {\n          throw new TypeError(\"Bookmark value should be a string, given: '\".concat(element, \"'\"));\n        }\n\n        result.push(element);\n      }\n    }\n\n    return result;\n  }\n\n  throw new TypeError(\"Bookmark should either be a string or a string array, given: '\".concat(value, \"'\"));\n}\n/**\n * Recursively flattens an array so that the result becomes a single array\n * of values, which does not include any sub-arrays\n *\n * @param {Array} value\n */\n\n\nfunction flattenArray(values) {\n  return values.reduce(function (dest, value) {\n    return Array.isArray(value) ? dest.concat(flattenArray(value)) : dest.concat(value);\n  }, []);\n}"]},"metadata":{},"sourceType":"script"}