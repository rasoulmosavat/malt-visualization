{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _uriJs = require(\"uri-js\");\n\nvar _util = require(\"./util\");\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar DEFAULT_BOLT_PORT = 7687;\nvar DEFAULT_HTTP_PORT = 7474;\nvar DEFAULT_HTTPS_PORT = 7473;\n\nvar Url = function Url(scheme, host, port, hostAndPort, query) {\n  (0, _classCallCheck2[\"default\"])(this, Url);\n  /**\n   * Nullable scheme (protocol) of the URL.\n   * Example: 'bolt', 'neo4j', 'http', 'https', etc.\n   * @type {string}\n   */\n\n  this.scheme = scheme;\n  /**\n   * Nonnull host name or IP address. IPv6 not wrapped in square brackets.\n   * Example: 'neo4j.com', 'localhost', '127.0.0.1', '192.168.10.15', '::1', '2001:4860:4860::8844', etc.\n   * @type {string}\n   */\n\n  this.host = host;\n  /**\n   * Nonnull number representing port. Default port for the given scheme is used if given URL string\n   * does not contain port. Example: 7687 for bolt, 7474 for HTTP and 7473 for HTTPS.\n   * @type {number}\n   */\n\n  this.port = port;\n  /**\n   * Nonnull host name or IP address plus port, separated by ':'. IPv6 wrapped in square brackets.\n   * Example: 'neo4j.com', 'neo4j.com:7687', '127.0.0.1', '127.0.0.1:8080', '[2001:4860:4860::8844]',\n   * '[2001:4860:4860::8844]:9090', etc.\n   * @type {string}\n   */\n\n  this.hostAndPort = hostAndPort;\n  /**\n   * Nonnull object representing parsed query string key-value pairs. Duplicated keys not supported.\n   * Example: '{}', '{'key1': 'value1', 'key2': 'value2'}', etc.\n   * @type {Object}\n   */\n\n  this.query = query;\n};\n\nfunction parseDatabaseUrl(url) {\n  (0, _util.assertString)(url, 'URL');\n  var sanitized = sanitizeUrl(url);\n  var parsedUrl = (0, _uriJs.parse)(sanitized.url);\n  var scheme = sanitized.schemeMissing ? null : extractScheme(parsedUrl.scheme);\n  var host = extractHost(parsedUrl.host); // no square brackets for IPv6\n\n  var formattedHost = formatHost(host); // has square brackets for IPv6\n\n  var port = extractPort(parsedUrl.port, scheme);\n  var hostAndPort = \"\".concat(formattedHost, \":\").concat(port);\n  var query = extractQuery(parsedUrl.query, url);\n  return new Url(scheme, host, port, hostAndPort, query);\n}\n\nfunction sanitizeUrl(url) {\n  url = url.trim();\n\n  if (url.indexOf('://') === -1) {\n    // url does not contain scheme, add dummy 'none://' to make parser work correctly\n    return {\n      schemeMissing: true,\n      url: \"none://\".concat(url)\n    };\n  }\n\n  return {\n    schemeMissing: false,\n    url: url\n  };\n}\n\nfunction extractScheme(scheme) {\n  if (scheme) {\n    scheme = scheme.trim();\n\n    if (scheme.charAt(scheme.length - 1) === ':') {\n      scheme = scheme.substring(0, scheme.length - 1);\n    }\n\n    return scheme;\n  }\n\n  return null;\n}\n\nfunction extractHost(host, url) {\n  if (!host) {\n    throw new Error(\"Unable to extract host from \".concat(url));\n  }\n\n  return host.trim();\n}\n\nfunction extractPort(portString, scheme) {\n  var port = parseInt(portString, 10);\n  return port === 0 || port ? port : defaultPortForScheme(scheme);\n}\n\nfunction extractQuery(queryString, url) {\n  var query = trimAndSanitizeQuery(queryString);\n  var context = {};\n\n  if (query) {\n    query.split('&').forEach(function (pair) {\n      var keyValue = pair.split('=');\n\n      if (keyValue.length !== 2) {\n        throw new Error(\"Invalid parameters: '\".concat(keyValue, \"' in URL '\").concat(url, \"'.\"));\n      }\n\n      var key = trimAndVerifyQueryElement(keyValue[0], 'key', url);\n      var value = trimAndVerifyQueryElement(keyValue[1], 'value', url);\n\n      if (context[key]) {\n        throw new Error(\"Duplicated query parameters with key '\".concat(key, \"' in URL '\").concat(url, \"'\"));\n      }\n\n      context[key] = value;\n    });\n  }\n\n  return context;\n}\n\nfunction trimAndSanitizeQuery(query) {\n  query = (query || '').trim();\n\n  if (query && query.charAt(0) === '?') {\n    query = query.substring(1, query.length);\n  }\n\n  return query;\n}\n\nfunction trimAndVerifyQueryElement(element, name, url) {\n  element = (element || '').trim();\n\n  if (!element) {\n    throw new Error(\"Illegal empty \".concat(name, \" in URL query '\").concat(url, \"'\"));\n  }\n\n  return element;\n}\n\nfunction escapeIPv6Address(address) {\n  var startsWithSquareBracket = address.charAt(0) === '[';\n  var endsWithSquareBracket = address.charAt(address.length - 1) === ']';\n\n  if (!startsWithSquareBracket && !endsWithSquareBracket) {\n    return \"[\".concat(address, \"]\");\n  } else if (startsWithSquareBracket && endsWithSquareBracket) {\n    return address;\n  } else {\n    throw new Error(\"Illegal IPv6 address \".concat(address));\n  }\n}\n\nfunction formatHost(host) {\n  if (!host) {\n    throw new Error(\"Illegal host \".concat(host));\n  }\n\n  var isIPv6Address = host.indexOf(':') >= 0;\n  return isIPv6Address ? escapeIPv6Address(host) : host;\n}\n\nfunction formatIPv4Address(address, port) {\n  return \"\".concat(address, \":\").concat(port);\n}\n\nfunction formatIPv6Address(address, port) {\n  var escapedAddress = escapeIPv6Address(address);\n  return \"\".concat(escapedAddress, \":\").concat(port);\n}\n\nfunction defaultPortForScheme(scheme) {\n  if (scheme === 'http') {\n    return DEFAULT_HTTP_PORT;\n  } else if (scheme === 'https') {\n    return DEFAULT_HTTPS_PORT;\n  } else {\n    return DEFAULT_BOLT_PORT;\n  }\n}\n\nvar _default = {\n  parseDatabaseUrl: parseDatabaseUrl,\n  defaultPortForScheme: defaultPortForScheme,\n  formatIPv4Address: formatIPv4Address,\n  formatIPv6Address: formatIPv6Address\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["d:/webback/pro5/node_modules/neo4j-driver/lib/internal/url-util.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_classCallCheck2","_uriJs","_util","DEFAULT_BOLT_PORT","DEFAULT_HTTP_PORT","DEFAULT_HTTPS_PORT","Url","scheme","host","port","hostAndPort","query","parseDatabaseUrl","url","assertString","sanitized","sanitizeUrl","parsedUrl","parse","schemeMissing","extractScheme","extractHost","formattedHost","formatHost","extractPort","concat","extractQuery","trim","indexOf","charAt","length","substring","Error","portString","parseInt","defaultPortForScheme","queryString","trimAndSanitizeQuery","context","split","forEach","pair","keyValue","key","trimAndVerifyQueryElement","element","name","escapeIPv6Address","address","startsWithSquareBracket","endsWithSquareBracket","isIPv6Address","formatIPv4Address","formatIPv6Address","escapedAddress","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _uriJs = require(\"uri-js\");\n\nvar _util = require(\"./util\");\n\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar DEFAULT_BOLT_PORT = 7687;\nvar DEFAULT_HTTP_PORT = 7474;\nvar DEFAULT_HTTPS_PORT = 7473;\n\nvar Url = function Url(scheme, host, port, hostAndPort, query) {\n  (0, _classCallCheck2[\"default\"])(this, Url);\n\n  /**\n   * Nullable scheme (protocol) of the URL.\n   * Example: 'bolt', 'neo4j', 'http', 'https', etc.\n   * @type {string}\n   */\n  this.scheme = scheme;\n  /**\n   * Nonnull host name or IP address. IPv6 not wrapped in square brackets.\n   * Example: 'neo4j.com', 'localhost', '127.0.0.1', '192.168.10.15', '::1', '2001:4860:4860::8844', etc.\n   * @type {string}\n   */\n\n  this.host = host;\n  /**\n   * Nonnull number representing port. Default port for the given scheme is used if given URL string\n   * does not contain port. Example: 7687 for bolt, 7474 for HTTP and 7473 for HTTPS.\n   * @type {number}\n   */\n\n  this.port = port;\n  /**\n   * Nonnull host name or IP address plus port, separated by ':'. IPv6 wrapped in square brackets.\n   * Example: 'neo4j.com', 'neo4j.com:7687', '127.0.0.1', '127.0.0.1:8080', '[2001:4860:4860::8844]',\n   * '[2001:4860:4860::8844]:9090', etc.\n   * @type {string}\n   */\n\n  this.hostAndPort = hostAndPort;\n  /**\n   * Nonnull object representing parsed query string key-value pairs. Duplicated keys not supported.\n   * Example: '{}', '{'key1': 'value1', 'key2': 'value2'}', etc.\n   * @type {Object}\n   */\n\n  this.query = query;\n};\n\nfunction parseDatabaseUrl(url) {\n  (0, _util.assertString)(url, 'URL');\n  var sanitized = sanitizeUrl(url);\n  var parsedUrl = (0, _uriJs.parse)(sanitized.url);\n  var scheme = sanitized.schemeMissing ? null : extractScheme(parsedUrl.scheme);\n  var host = extractHost(parsedUrl.host); // no square brackets for IPv6\n\n  var formattedHost = formatHost(host); // has square brackets for IPv6\n\n  var port = extractPort(parsedUrl.port, scheme);\n  var hostAndPort = \"\".concat(formattedHost, \":\").concat(port);\n  var query = extractQuery(parsedUrl.query, url);\n  return new Url(scheme, host, port, hostAndPort, query);\n}\n\nfunction sanitizeUrl(url) {\n  url = url.trim();\n\n  if (url.indexOf('://') === -1) {\n    // url does not contain scheme, add dummy 'none://' to make parser work correctly\n    return {\n      schemeMissing: true,\n      url: \"none://\".concat(url)\n    };\n  }\n\n  return {\n    schemeMissing: false,\n    url: url\n  };\n}\n\nfunction extractScheme(scheme) {\n  if (scheme) {\n    scheme = scheme.trim();\n\n    if (scheme.charAt(scheme.length - 1) === ':') {\n      scheme = scheme.substring(0, scheme.length - 1);\n    }\n\n    return scheme;\n  }\n\n  return null;\n}\n\nfunction extractHost(host, url) {\n  if (!host) {\n    throw new Error(\"Unable to extract host from \".concat(url));\n  }\n\n  return host.trim();\n}\n\nfunction extractPort(portString, scheme) {\n  var port = parseInt(portString, 10);\n  return port === 0 || port ? port : defaultPortForScheme(scheme);\n}\n\nfunction extractQuery(queryString, url) {\n  var query = trimAndSanitizeQuery(queryString);\n  var context = {};\n\n  if (query) {\n    query.split('&').forEach(function (pair) {\n      var keyValue = pair.split('=');\n\n      if (keyValue.length !== 2) {\n        throw new Error(\"Invalid parameters: '\".concat(keyValue, \"' in URL '\").concat(url, \"'.\"));\n      }\n\n      var key = trimAndVerifyQueryElement(keyValue[0], 'key', url);\n      var value = trimAndVerifyQueryElement(keyValue[1], 'value', url);\n\n      if (context[key]) {\n        throw new Error(\"Duplicated query parameters with key '\".concat(key, \"' in URL '\").concat(url, \"'\"));\n      }\n\n      context[key] = value;\n    });\n  }\n\n  return context;\n}\n\nfunction trimAndSanitizeQuery(query) {\n  query = (query || '').trim();\n\n  if (query && query.charAt(0) === '?') {\n    query = query.substring(1, query.length);\n  }\n\n  return query;\n}\n\nfunction trimAndVerifyQueryElement(element, name, url) {\n  element = (element || '').trim();\n\n  if (!element) {\n    throw new Error(\"Illegal empty \".concat(name, \" in URL query '\").concat(url, \"'\"));\n  }\n\n  return element;\n}\n\nfunction escapeIPv6Address(address) {\n  var startsWithSquareBracket = address.charAt(0) === '[';\n  var endsWithSquareBracket = address.charAt(address.length - 1) === ']';\n\n  if (!startsWithSquareBracket && !endsWithSquareBracket) {\n    return \"[\".concat(address, \"]\");\n  } else if (startsWithSquareBracket && endsWithSquareBracket) {\n    return address;\n  } else {\n    throw new Error(\"Illegal IPv6 address \".concat(address));\n  }\n}\n\nfunction formatHost(host) {\n  if (!host) {\n    throw new Error(\"Illegal host \".concat(host));\n  }\n\n  var isIPv6Address = host.indexOf(':') >= 0;\n  return isIPv6Address ? escapeIPv6Address(host) : host;\n}\n\nfunction formatIPv4Address(address, port) {\n  return \"\".concat(address, \":\").concat(port);\n}\n\nfunction formatIPv6Address(address, port) {\n  var escapedAddress = escapeIPv6Address(address);\n  return \"\".concat(escapedAddress, \":\").concat(port);\n}\n\nfunction defaultPortForScheme(scheme) {\n  if (scheme === 'http') {\n    return DEFAULT_HTTP_PORT;\n  } else if (scheme === 'https') {\n    return DEFAULT_HTTPS_PORT;\n  } else {\n    return DEFAULT_BOLT_PORT;\n  }\n}\n\nvar _default = {\n  parseDatabaseUrl: parseDatabaseUrl,\n  defaultPortForScheme: defaultPortForScheme,\n  formatIPv4Address: formatIPv4Address,\n  formatIPv6Address: formatIPv6Address\n};\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}