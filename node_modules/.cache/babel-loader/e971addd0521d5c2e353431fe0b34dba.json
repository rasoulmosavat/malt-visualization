{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _error = require(\"../error\");\n\nvar _driver = require(\"../driver\");\n\nvar _session = _interopRequireDefault(require(\"../session\"));\n\nvar _routingTable = _interopRequireDefault(require(\"./routing-table\"));\n\nvar _rediscovery = _interopRequireDefault(require(\"./rediscovery\"));\n\nvar _routingUtil = _interopRequireDefault(require(\"./routing-util\"));\n\nvar _node = require(\"./node\");\n\nvar _connectionProviderSingle = _interopRequireDefault(require(\"./connection-provider-single\"));\n\nvar _serverVersion = require(\"./server-version\");\n\nvar _connectionProviderPooled = _interopRequireDefault(require(\"./connection-provider-pooled\"));\n\nvar _connectionErrorHandler = _interopRequireDefault(require(\"./connection-error-handler\"));\n\nvar _connectionDelegate = _interopRequireDefault(require(\"./connection-delegate\"));\n\nvar _leastConnectedLoadBalancingStrategy = _interopRequireDefault(require(\"./least-connected-load-balancing-strategy\"));\n\nvar _bookmark = _interopRequireDefault(require(\"./bookmark\"));\n\nvar _connectionChannel = _interopRequireDefault(require(\"./connection-channel\"));\n\nvar _integer = require(\"../integer\");\n\nvar _constants = require(\"./constants\");\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar UNAUTHORIZED_ERROR_CODE = 'Neo.ClientError.Security.Unauthorized';\nvar DATABASE_NOT_FOUND_ERROR_CODE = 'Neo.ClientError.Database.DatabaseNotFound';\nvar SYSTEM_DB_NAME = 'system';\nvar DEFAULT_DB_NAME = '';\nvar DEFAULT_ROUTING_TABLE_PURGE_DELAY = (0, _integer[\"int\"])(30000);\n\nvar RoutingConnectionProvider = /*#__PURE__*/function (_PooledConnectionProv) {\n  (0, _inherits2[\"default\"])(RoutingConnectionProvider, _PooledConnectionProv);\n\n  function RoutingConnectionProvider(_ref) {\n    var _this;\n\n    var id = _ref.id,\n        address = _ref.address,\n        routingContext = _ref.routingContext,\n        hostNameResolver = _ref.hostNameResolver,\n        config = _ref.config,\n        log = _ref.log,\n        userAgent = _ref.userAgent,\n        authToken = _ref.authToken,\n        routingTablePurgeDelay = _ref.routingTablePurgeDelay;\n    (0, _classCallCheck2[\"default\"])(this, RoutingConnectionProvider);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(RoutingConnectionProvider).call(this, {\n      id: id,\n      config: config,\n      log: log,\n      userAgent: userAgent,\n      authToken: authToken\n    }));\n    _this._seedRouter = address;\n    _this._routingTables = {};\n    _this._rediscovery = new _rediscovery[\"default\"](new _routingUtil[\"default\"](routingContext));\n    _this._loadBalancingStrategy = new _leastConnectedLoadBalancingStrategy[\"default\"](_this._connectionPool);\n    _this._hostNameResolver = hostNameResolver;\n    _this._dnsResolver = new _node.HostNameResolver();\n    _this._log = log;\n    _this._useSeedRouter = true;\n    _this._routingTablePurgeDelay = routingTablePurgeDelay ? (0, _integer[\"int\"])(routingTablePurgeDelay) : DEFAULT_ROUTING_TABLE_PURGE_DELAY;\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(RoutingConnectionProvider, [{\n    key: \"_createConnectionErrorHandler\",\n    value: function _createConnectionErrorHandler() {\n      // connection errors mean SERVICE_UNAVAILABLE for direct driver but for routing driver they should only\n      // result in SESSION_EXPIRED because there might still exist other servers capable of serving the request\n      return new _connectionErrorHandler[\"default\"](_error.SESSION_EXPIRED);\n    }\n  }, {\n    key: \"_handleUnavailability\",\n    value: function _handleUnavailability(error, address, database) {\n      this._log.warn(\"Routing driver \".concat(this._id, \" will forget \").concat(address, \" for database '\").concat(database, \"' because of an error \").concat(error.code, \" '\").concat(error.message, \"'\"));\n\n      this.forget(address, database || '');\n      return error;\n    }\n  }, {\n    key: \"_handleWriteFailure\",\n    value: function _handleWriteFailure(error, address, database) {\n      this._log.warn(\"Routing driver \".concat(this._id, \" will forget writer \").concat(address, \" for database '\").concat(database, \"' because of an error \").concat(error.code, \" '\").concat(error.message, \"'\"));\n\n      this.forgetWriter(address, database || '');\n      return (0, _error.newError)('No longer possible to write to server at ' + address, _error.SESSION_EXPIRED);\n    }\n    /**\n     * See {@link ConnectionProvider} for more information about this method and\n     * its arguments.\n     */\n\n  }, {\n    key: \"acquireConnection\",\n    value: function () {\n      var _acquireConnection = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n        var _this2 = this;\n\n        var _ref2,\n            accessMode,\n            database,\n            bookmark,\n            name,\n            address,\n            databaseSpecificErrorHandler,\n            routingTable,\n            connection,\n            transformed,\n            _args = arguments;\n\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref2 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, accessMode = _ref2.accessMode, database = _ref2.database, bookmark = _ref2.bookmark;\n                databaseSpecificErrorHandler = new _connectionErrorHandler[\"default\"](_error.SESSION_EXPIRED, function (error, address) {\n                  return _this2._handleUnavailability(error, address, database);\n                }, function (error, address) {\n                  return _this2._handleWriteFailure(error, address, database);\n                });\n                _context.next = 4;\n                return this._freshRoutingTable({\n                  accessMode: accessMode,\n                  database: database || DEFAULT_DB_NAME,\n                  bookmark: bookmark\n                });\n\n              case 4:\n                routingTable = _context.sent;\n\n                if (!(accessMode === _driver.READ)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                address = this._loadBalancingStrategy.selectReader(routingTable.readers);\n                name = 'read';\n                _context.next = 16;\n                break;\n\n              case 10:\n                if (!(accessMode === _driver.WRITE)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                address = this._loadBalancingStrategy.selectWriter(routingTable.writers);\n                name = 'write';\n                _context.next = 16;\n                break;\n\n              case 15:\n                throw (0, _error.newError)('Illegal mode ' + accessMode);\n\n              case 16:\n                if (address) {\n                  _context.next = 18;\n                  break;\n                }\n\n                throw (0, _error.newError)(\"Failed to obtain connection towards \".concat(name, \" server. Known routing table is: \").concat(routingTable), _error.SESSION_EXPIRED);\n\n              case 18:\n                _context.prev = 18;\n                _context.next = 21;\n                return this._acquireConnectionToServer(address, name, routingTable);\n\n              case 21:\n                connection = _context.sent;\n                return _context.abrupt(\"return\", new _connectionDelegate[\"default\"](connection, databaseSpecificErrorHandler));\n\n              case 25:\n                _context.prev = 25;\n                _context.t0 = _context[\"catch\"](18);\n                transformed = databaseSpecificErrorHandler.handleAndTransformError(_context.t0, address);\n                throw transformed;\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[18, 25]]);\n      }));\n\n      function acquireConnection() {\n        return _acquireConnection.apply(this, arguments);\n      }\n\n      return acquireConnection;\n    }()\n  }, {\n    key: \"_hasProtocolVersion\",\n    value: function () {\n      var _hasProtocolVersion2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(versionPredicate) {\n        var addresses, lastError, i, connection, protocol;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._resolveSeedRouter(this._seedRouter);\n\n              case 2:\n                addresses = _context2.sent;\n                i = 0;\n\n              case 4:\n                if (!(i < addresses.length)) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                connection = _connectionChannel[\"default\"].create(addresses[i], this._config, this._createConnectionErrorHandler(), this._log);\n                _context2.prev = 6;\n                _context2.next = 9;\n                return connection._negotiateProtocol();\n\n              case 9:\n                protocol = connection.protocol();\n\n                if (!protocol) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", versionPredicate(protocol.version));\n\n              case 12:\n                return _context2.abrupt(\"return\", false);\n\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](6);\n                lastError = _context2.t0;\n\n              case 18:\n                _context2.prev = 18;\n                _context2.next = 21;\n                return connection.close();\n\n              case 21:\n                return _context2.finish(18);\n\n              case 22:\n                i++;\n                _context2.next = 4;\n                break;\n\n              case 25:\n                if (!lastError) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                throw lastError;\n\n              case 27:\n                return _context2.abrupt(\"return\", false);\n\n              case 28:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 15, 18, 22]]);\n      }));\n\n      function _hasProtocolVersion(_x) {\n        return _hasProtocolVersion2.apply(this, arguments);\n      }\n\n      return _hasProtocolVersion;\n    }()\n  }, {\n    key: \"supportsMultiDb\",\n    value: function () {\n      var _supportsMultiDb = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3() {\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._hasProtocolVersion(function (version) {\n                  return version >= _constants.BOLT_PROTOCOL_V4;\n                });\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function supportsMultiDb() {\n        return _supportsMultiDb.apply(this, arguments);\n      }\n\n      return supportsMultiDb;\n    }()\n  }, {\n    key: \"supportsTransactionConfig\",\n    value: function () {\n      var _supportsTransactionConfig = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4() {\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._hasProtocolVersion(function (version) {\n                  return version >= _constants.BOLT_PROTOCOL_V3;\n                });\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function supportsTransactionConfig() {\n        return _supportsTransactionConfig.apply(this, arguments);\n      }\n\n      return supportsTransactionConfig;\n    }()\n  }, {\n    key: \"forget\",\n    value: function forget(address, database) {\n      if (database || database === '') {\n        this._routingTables[database].forget(address);\n      } else {\n        Object.values(this._routingTables).forEach(function (routingTable) {\n          return routingTable.forget(address);\n        });\n      } // We're firing and forgetting this operation explicitly and listening for any\n      // errors to avoid unhandled promise rejection\n\n\n      this._connectionPool.purge(address)[\"catch\"](function () {});\n    }\n  }, {\n    key: \"forgetWriter\",\n    value: function forgetWriter(address, database) {\n      if (database || database === '') {\n        this._routingTables[database].forgetWriter(address);\n      } else {\n        Object.values(this._routingTables).forEach(function (routingTable) {\n          return routingTable.forgetWriter(address);\n        });\n      }\n    }\n  }, {\n    key: \"_acquireConnectionToServer\",\n    value: function _acquireConnectionToServer(address, serverName, routingTable) {\n      return this._connectionPool.acquire(address);\n    }\n  }, {\n    key: \"_freshRoutingTable\",\n    value: function _freshRoutingTable() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          accessMode = _ref3.accessMode,\n          database = _ref3.database,\n          bookmark = _ref3.bookmark;\n\n      var currentRoutingTable = this._routingTables[database] || new _routingTable[\"default\"]({\n        database: database\n      });\n\n      if (!currentRoutingTable.isStaleFor(accessMode)) {\n        return currentRoutingTable;\n      }\n\n      this._log.info(\"Routing table is stale for database: \\\"\".concat(database, \"\\\" and access mode: \\\"\").concat(accessMode, \"\\\": \").concat(currentRoutingTable));\n\n      return this._refreshRoutingTable(currentRoutingTable, bookmark);\n    }\n  }, {\n    key: \"_refreshRoutingTable\",\n    value: function _refreshRoutingTable(currentRoutingTable, bookmark) {\n      var knownRouters = currentRoutingTable.routers;\n\n      if (this._useSeedRouter) {\n        return this._fetchRoutingTableFromSeedRouterFallbackToKnownRouters(knownRouters, currentRoutingTable, bookmark);\n      }\n\n      return this._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter(knownRouters, currentRoutingTable, bookmark);\n    }\n  }, {\n    key: \"_fetchRoutingTableFromSeedRouterFallbackToKnownRouters\",\n    value: function () {\n      var _fetchRoutingTableFromSeedRouterFallbackToKnownRouters2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(knownRouters, currentRoutingTable, bookmark) {\n        var seenRouters, newRoutingTable;\n        return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // we start with seed router, no routers were probed before\n                seenRouters = [];\n                _context5.next = 3;\n                return this._fetchRoutingTableUsingSeedRouter(seenRouters, this._seedRouter, currentRoutingTable, bookmark);\n\n              case 3:\n                newRoutingTable = _context5.sent;\n\n                if (!newRoutingTable) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                this._useSeedRouter = false;\n                _context5.next = 11;\n                break;\n\n              case 8:\n                _context5.next = 10;\n                return this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmark);\n\n              case 10:\n                newRoutingTable = _context5.sent;\n\n              case 11:\n                _context5.next = 13;\n                return this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable);\n\n              case 13:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _fetchRoutingTableFromSeedRouterFallbackToKnownRouters(_x2, _x3, _x4) {\n        return _fetchRoutingTableFromSeedRouterFallbackToKnownRouters2.apply(this, arguments);\n      }\n\n      return _fetchRoutingTableFromSeedRouterFallbackToKnownRouters;\n    }()\n  }, {\n    key: \"_fetchRoutingTableFromKnownRoutersFallbackToSeedRouter\",\n    value: function () {\n      var _fetchRoutingTableFromKnownRoutersFallbackToSeedRouter2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee6(knownRouters, currentRoutingTable, bookmark) {\n        var newRoutingTable;\n        return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmark);\n\n              case 2:\n                newRoutingTable = _context6.sent;\n\n                if (newRoutingTable) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                _context6.next = 6;\n                return this._fetchRoutingTableUsingSeedRouter(knownRouters, this._seedRouter, currentRoutingTable, bookmark);\n\n              case 6:\n                newRoutingTable = _context6.sent;\n\n              case 7:\n                _context6.next = 9;\n                return this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable);\n\n              case 9:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _fetchRoutingTableFromKnownRoutersFallbackToSeedRouter(_x5, _x6, _x7) {\n        return _fetchRoutingTableFromKnownRoutersFallbackToSeedRouter2.apply(this, arguments);\n      }\n\n      return _fetchRoutingTableFromKnownRoutersFallbackToSeedRouter;\n    }()\n  }, {\n    key: \"_fetchRoutingTableUsingKnownRouters\",\n    value: function () {\n      var _fetchRoutingTableUsingKnownRouters2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee7(knownRouters, currentRoutingTable, bookmark) {\n        var newRoutingTable, lastRouterIndex;\n        return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._fetchRoutingTable(knownRouters, currentRoutingTable, bookmark);\n\n              case 2:\n                newRoutingTable = _context7.sent;\n\n                if (!newRoutingTable) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", newRoutingTable);\n\n              case 5:\n                // returned routing table was undefined, this means a connection error happened and the last known\n                // router did not return a valid routing table, so we need to forget it\n                lastRouterIndex = knownRouters.length - 1;\n\n                RoutingConnectionProvider._forgetRouter(currentRoutingTable, knownRouters, lastRouterIndex);\n\n                return _context7.abrupt(\"return\", null);\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _fetchRoutingTableUsingKnownRouters(_x8, _x9, _x10) {\n        return _fetchRoutingTableUsingKnownRouters2.apply(this, arguments);\n      }\n\n      return _fetchRoutingTableUsingKnownRouters;\n    }()\n  }, {\n    key: \"_fetchRoutingTableUsingSeedRouter\",\n    value: function () {\n      var _fetchRoutingTableUsingSeedRouter2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee8(seenRouters, seedRouter, routingTable, bookmark) {\n        var resolvedAddresses, newAddresses;\n        return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this._resolveSeedRouter(seedRouter);\n\n              case 2:\n                resolvedAddresses = _context8.sent; // filter out all addresses that we've already tried\n\n                newAddresses = resolvedAddresses.filter(function (address) {\n                  return seenRouters.indexOf(address) < 0;\n                });\n                _context8.next = 6;\n                return this._fetchRoutingTable(newAddresses, routingTable, bookmark);\n\n              case 6:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function _fetchRoutingTableUsingSeedRouter(_x11, _x12, _x13, _x14) {\n        return _fetchRoutingTableUsingSeedRouter2.apply(this, arguments);\n      }\n\n      return _fetchRoutingTableUsingSeedRouter;\n    }()\n  }, {\n    key: \"_resolveSeedRouter\",\n    value: function () {\n      var _resolveSeedRouter2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee9(seedRouter) {\n        var _this3 = this;\n\n        var resolvedAddresses, dnsResolvedAddresses;\n        return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._hostNameResolver.resolve(seedRouter);\n\n              case 2:\n                resolvedAddresses = _context9.sent;\n                _context9.next = 5;\n                return Promise.all(resolvedAddresses.map(function (address) {\n                  return _this3._dnsResolver.resolve(address);\n                }));\n\n              case 5:\n                dnsResolvedAddresses = _context9.sent;\n                return _context9.abrupt(\"return\", [].concat.apply([], dnsResolvedAddresses));\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function _resolveSeedRouter(_x15) {\n        return _resolveSeedRouter2.apply(this, arguments);\n      }\n\n      return _resolveSeedRouter;\n    }()\n  }, {\n    key: \"_fetchRoutingTable\",\n    value: function _fetchRoutingTable(routerAddresses, routingTable, bookmark) {\n      var _this4 = this;\n\n      return routerAddresses.reduce( /*#__PURE__*/function () {\n        var _ref4 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee10(refreshedTablePromise, currentRouter, currentIndex) {\n          var newRoutingTable, previousRouterIndex, session;\n          return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  _context10.next = 2;\n                  return refreshedTablePromise;\n\n                case 2:\n                  newRoutingTable = _context10.sent;\n\n                  if (!newRoutingTable) {\n                    _context10.next = 7;\n                    break;\n                  }\n\n                  return _context10.abrupt(\"return\", newRoutingTable);\n\n                case 7:\n                  // returned routing table was undefined, this means a connection error happened and we need to forget the\n                  // previous router and try the next one\n                  previousRouterIndex = currentIndex - 1;\n\n                  RoutingConnectionProvider._forgetRouter(routingTable, routerAddresses, previousRouterIndex);\n\n                case 9:\n                  _context10.next = 11;\n                  return _this4._createSessionForRediscovery(currentRouter, bookmark);\n\n                case 11:\n                  session = _context10.sent;\n\n                  if (!session) {\n                    _context10.next = 27;\n                    break;\n                  }\n\n                  _context10.prev = 13;\n                  _context10.next = 16;\n                  return _this4._rediscovery.lookupRoutingTableOnRouter(session, routingTable.database, currentRouter);\n\n                case 16:\n                  return _context10.abrupt(\"return\", _context10.sent);\n\n                case 19:\n                  _context10.prev = 19;\n                  _context10.t0 = _context10[\"catch\"](13);\n\n                  if (!(_context10.t0 && _context10.t0.code === DATABASE_NOT_FOUND_ERROR_CODE)) {\n                    _context10.next = 23;\n                    break;\n                  }\n\n                  throw _context10.t0;\n\n                case 23:\n                  _this4._log.warn(\"unable to fetch routing table because of an error \".concat(_context10.t0));\n\n                  return _context10.abrupt(\"return\", null);\n\n                case 25:\n                  _context10.next = 28;\n                  break;\n\n                case 27:\n                  return _context10.abrupt(\"return\", null);\n\n                case 28:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee10, null, [[13, 19]]);\n        }));\n\n        return function (_x16, _x17, _x18) {\n          return _ref4.apply(this, arguments);\n        };\n      }(), Promise.resolve(null));\n    }\n  }, {\n    key: \"_createSessionForRediscovery\",\n    value: function () {\n      var _createSessionForRediscovery2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee11(routerAddress, bookmark) {\n        var connection, connectionProvider, version;\n        return _regenerator[\"default\"].wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.prev = 0;\n                _context11.next = 3;\n                return this._connectionPool.acquire(routerAddress);\n\n              case 3:\n                connection = _context11.sent;\n                connectionProvider = new _connectionProviderSingle[\"default\"](connection);\n                version = _serverVersion.ServerVersion.fromString(connection.version);\n\n                if (!(version.compareTo(_serverVersion.VERSION_4_0_0) < 0)) {\n                  _context11.next = 8;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\", new _session[\"default\"]({\n                  mode: _driver.WRITE,\n                  bookmark: _bookmark[\"default\"].empty(),\n                  connectionProvider: connectionProvider\n                }));\n\n              case 8:\n                return _context11.abrupt(\"return\", new _session[\"default\"]({\n                  mode: _driver.READ,\n                  database: SYSTEM_DB_NAME,\n                  bookmark: bookmark,\n                  connectionProvider: connectionProvider\n                }));\n\n              case 11:\n                _context11.prev = 11;\n                _context11.t0 = _context11[\"catch\"](0);\n\n                if (!(_context11.t0 && _context11.t0.code === UNAUTHORIZED_ERROR_CODE)) {\n                  _context11.next = 15;\n                  break;\n                }\n\n                throw _context11.t0;\n\n              case 15:\n                return _context11.abrupt(\"return\", null);\n\n              case 16:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[0, 11]]);\n      }));\n\n      function _createSessionForRediscovery(_x19, _x20) {\n        return _createSessionForRediscovery2.apply(this, arguments);\n      }\n\n      return _createSessionForRediscovery;\n    }()\n  }, {\n    key: \"_applyRoutingTableIfPossible\",\n    value: function () {\n      var _applyRoutingTableIfPossible2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee12(currentRoutingTable, newRoutingTable) {\n        return _regenerator[\"default\"].wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (newRoutingTable) {\n                  _context12.next = 2;\n                  break;\n                }\n\n                throw (0, _error.newError)(\"Could not perform discovery. No routing servers available. Known routing table: \".concat(currentRoutingTable), _error.SERVICE_UNAVAILABLE);\n\n              case 2:\n                if (newRoutingTable.writers.length === 0) {\n                  // use seed router next time. this is important when cluster is partitioned. it tries to make sure driver\n                  // does not always get routing table without writers because it talks exclusively to a minority partition\n                  this._useSeedRouter = true;\n                }\n\n                _context12.next = 5;\n                return this._updateRoutingTable(newRoutingTable);\n\n              case 5:\n                return _context12.abrupt(\"return\", newRoutingTable);\n\n              case 6:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function _applyRoutingTableIfPossible(_x21, _x22) {\n        return _applyRoutingTableIfPossible2.apply(this, arguments);\n      }\n\n      return _applyRoutingTableIfPossible;\n    }()\n  }, {\n    key: \"_updateRoutingTable\",\n    value: function () {\n      var _updateRoutingTable2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee13(newRoutingTable) {\n        var _this5 = this;\n\n        return _regenerator[\"default\"].wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this._connectionPool.keepAll(newRoutingTable.allServers());\n\n              case 2:\n                // filter out expired to purge (expired for a pre-configured amount of time) routing table entries\n                Object.values(this._routingTables).forEach(function (value) {\n                  if (value.isExpiredFor(_this5._routingTablePurgeDelay)) {\n                    delete _this5._routingTables[value.database];\n                  }\n                }); // make this driver instance aware of the new table\n\n                this._routingTables[newRoutingTable.database] = newRoutingTable;\n\n                this._log.info(\"Updated routing table \".concat(newRoutingTable));\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function _updateRoutingTable(_x23) {\n        return _updateRoutingTable2.apply(this, arguments);\n      }\n\n      return _updateRoutingTable;\n    }()\n  }], [{\n    key: \"_forgetRouter\",\n    value: function _forgetRouter(routingTable, routersArray, routerIndex) {\n      var address = routersArray[routerIndex];\n\n      if (routingTable && address) {\n        routingTable.forgetRouter(address);\n      }\n    }\n  }]);\n  return RoutingConnectionProvider;\n}(_connectionProviderPooled[\"default\"]);\n\nexports[\"default\"] = RoutingConnectionProvider;","map":{"version":3,"sources":["d:/webback/pro5/node_modules/neo4j-driver/lib/internal/connection-provider-routing.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_regenerator","_asyncToGenerator2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","_error","_driver","_session","_routingTable","_rediscovery","_routingUtil","_node","_connectionProviderSingle","_serverVersion","_connectionProviderPooled","_connectionErrorHandler","_connectionDelegate","_leastConnectedLoadBalancingStrategy","_bookmark","_connectionChannel","_integer","_constants","UNAUTHORIZED_ERROR_CODE","DATABASE_NOT_FOUND_ERROR_CODE","SYSTEM_DB_NAME","DEFAULT_DB_NAME","DEFAULT_ROUTING_TABLE_PURGE_DELAY","RoutingConnectionProvider","_PooledConnectionProv","_ref","_this","id","address","routingContext","hostNameResolver","config","log","userAgent","authToken","routingTablePurgeDelay","call","_seedRouter","_routingTables","_loadBalancingStrategy","_connectionPool","_hostNameResolver","_dnsResolver","HostNameResolver","_log","_useSeedRouter","_routingTablePurgeDelay","key","_createConnectionErrorHandler","SESSION_EXPIRED","_handleUnavailability","error","database","warn","concat","_id","code","message","forget","_handleWriteFailure","forgetWriter","newError","_acquireConnection","mark","_callee","_this2","_ref2","accessMode","bookmark","name","databaseSpecificErrorHandler","routingTable","connection","transformed","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","_freshRoutingTable","sent","READ","selectReader","readers","WRITE","selectWriter","writers","_acquireConnectionToServer","abrupt","t0","handleAndTransformError","stop","acquireConnection","apply","_hasProtocolVersion2","_callee2","versionPredicate","addresses","lastError","i","protocol","_callee2$","_context2","_resolveSeedRouter","create","_config","_negotiateProtocol","version","close","finish","_hasProtocolVersion","_x","_supportsMultiDb","_callee3","_callee3$","_context3","BOLT_PROTOCOL_V4","supportsMultiDb","_supportsTransactionConfig","_callee4","_callee4$","_context4","BOLT_PROTOCOL_V3","supportsTransactionConfig","values","forEach","purge","serverName","acquire","_ref3","currentRoutingTable","isStaleFor","info","_refreshRoutingTable","knownRouters","routers","_fetchRoutingTableFromSeedRouterFallbackToKnownRouters","_fetchRoutingTableFromKnownRoutersFallbackToSeedRouter","_fetchRoutingTableFromSeedRouterFallbackToKnownRouters2","_callee5","seenRouters","newRoutingTable","_callee5$","_context5","_fetchRoutingTableUsingSeedRouter","_fetchRoutingTableUsingKnownRouters","_applyRoutingTableIfPossible","_x2","_x3","_x4","_fetchRoutingTableFromKnownRoutersFallbackToSeedRouter2","_callee6","_callee6$","_context6","_x5","_x6","_x7","_fetchRoutingTableUsingKnownRouters2","_callee7","lastRouterIndex","_callee7$","_context7","_fetchRoutingTable","_forgetRouter","_x8","_x9","_x10","_fetchRoutingTableUsingSeedRouter2","_callee8","seedRouter","resolvedAddresses","newAddresses","_callee8$","_context8","filter","indexOf","_x11","_x12","_x13","_x14","_resolveSeedRouter2","_callee9","_this3","dnsResolvedAddresses","_callee9$","_context9","resolve","Promise","all","map","_x15","routerAddresses","_this4","reduce","_ref4","_callee10","refreshedTablePromise","currentRouter","currentIndex","previousRouterIndex","session","_callee10$","_context10","_createSessionForRediscovery","lookupRoutingTableOnRouter","_x16","_x17","_x18","_createSessionForRediscovery2","_callee11","routerAddress","connectionProvider","_callee11$","_context11","ServerVersion","fromString","compareTo","VERSION_4_0_0","mode","empty","_x19","_x20","_applyRoutingTableIfPossible2","_callee12","_callee12$","_context12","SERVICE_UNAVAILABLE","_updateRoutingTable","_x21","_x22","_updateRoutingTable2","_callee13","_this5","_callee13$","_context13","keepAll","allServers","isExpiredFor","_x23","routersArray","routerIndex","forgetRouter"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _error = require(\"../error\");\n\nvar _driver = require(\"../driver\");\n\nvar _session = _interopRequireDefault(require(\"../session\"));\n\nvar _routingTable = _interopRequireDefault(require(\"./routing-table\"));\n\nvar _rediscovery = _interopRequireDefault(require(\"./rediscovery\"));\n\nvar _routingUtil = _interopRequireDefault(require(\"./routing-util\"));\n\nvar _node = require(\"./node\");\n\nvar _connectionProviderSingle = _interopRequireDefault(require(\"./connection-provider-single\"));\n\nvar _serverVersion = require(\"./server-version\");\n\nvar _connectionProviderPooled = _interopRequireDefault(require(\"./connection-provider-pooled\"));\n\nvar _connectionErrorHandler = _interopRequireDefault(require(\"./connection-error-handler\"));\n\nvar _connectionDelegate = _interopRequireDefault(require(\"./connection-delegate\"));\n\nvar _leastConnectedLoadBalancingStrategy = _interopRequireDefault(require(\"./least-connected-load-balancing-strategy\"));\n\nvar _bookmark = _interopRequireDefault(require(\"./bookmark\"));\n\nvar _connectionChannel = _interopRequireDefault(require(\"./connection-channel\"));\n\nvar _integer = require(\"../integer\");\n\nvar _constants = require(\"./constants\");\n\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar UNAUTHORIZED_ERROR_CODE = 'Neo.ClientError.Security.Unauthorized';\nvar DATABASE_NOT_FOUND_ERROR_CODE = 'Neo.ClientError.Database.DatabaseNotFound';\nvar SYSTEM_DB_NAME = 'system';\nvar DEFAULT_DB_NAME = '';\nvar DEFAULT_ROUTING_TABLE_PURGE_DELAY = (0, _integer[\"int\"])(30000);\n\nvar RoutingConnectionProvider =\n/*#__PURE__*/\nfunction (_PooledConnectionProv) {\n  (0, _inherits2[\"default\"])(RoutingConnectionProvider, _PooledConnectionProv);\n\n  function RoutingConnectionProvider(_ref) {\n    var _this;\n\n    var id = _ref.id,\n        address = _ref.address,\n        routingContext = _ref.routingContext,\n        hostNameResolver = _ref.hostNameResolver,\n        config = _ref.config,\n        log = _ref.log,\n        userAgent = _ref.userAgent,\n        authToken = _ref.authToken,\n        routingTablePurgeDelay = _ref.routingTablePurgeDelay;\n    (0, _classCallCheck2[\"default\"])(this, RoutingConnectionProvider);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(RoutingConnectionProvider).call(this, {\n      id: id,\n      config: config,\n      log: log,\n      userAgent: userAgent,\n      authToken: authToken\n    }));\n    _this._seedRouter = address;\n    _this._routingTables = {};\n    _this._rediscovery = new _rediscovery[\"default\"](new _routingUtil[\"default\"](routingContext));\n    _this._loadBalancingStrategy = new _leastConnectedLoadBalancingStrategy[\"default\"](_this._connectionPool);\n    _this._hostNameResolver = hostNameResolver;\n    _this._dnsResolver = new _node.HostNameResolver();\n    _this._log = log;\n    _this._useSeedRouter = true;\n    _this._routingTablePurgeDelay = routingTablePurgeDelay ? (0, _integer[\"int\"])(routingTablePurgeDelay) : DEFAULT_ROUTING_TABLE_PURGE_DELAY;\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(RoutingConnectionProvider, [{\n    key: \"_createConnectionErrorHandler\",\n    value: function _createConnectionErrorHandler() {\n      // connection errors mean SERVICE_UNAVAILABLE for direct driver but for routing driver they should only\n      // result in SESSION_EXPIRED because there might still exist other servers capable of serving the request\n      return new _connectionErrorHandler[\"default\"](_error.SESSION_EXPIRED);\n    }\n  }, {\n    key: \"_handleUnavailability\",\n    value: function _handleUnavailability(error, address, database) {\n      this._log.warn(\"Routing driver \".concat(this._id, \" will forget \").concat(address, \" for database '\").concat(database, \"' because of an error \").concat(error.code, \" '\").concat(error.message, \"'\"));\n\n      this.forget(address, database || '');\n      return error;\n    }\n  }, {\n    key: \"_handleWriteFailure\",\n    value: function _handleWriteFailure(error, address, database) {\n      this._log.warn(\"Routing driver \".concat(this._id, \" will forget writer \").concat(address, \" for database '\").concat(database, \"' because of an error \").concat(error.code, \" '\").concat(error.message, \"'\"));\n\n      this.forgetWriter(address, database || '');\n      return (0, _error.newError)('No longer possible to write to server at ' + address, _error.SESSION_EXPIRED);\n    }\n    /**\n     * See {@link ConnectionProvider} for more information about this method and\n     * its arguments.\n     */\n\n  }, {\n    key: \"acquireConnection\",\n    value: function () {\n      var _acquireConnection = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee() {\n        var _this2 = this;\n\n        var _ref2,\n            accessMode,\n            database,\n            bookmark,\n            name,\n            address,\n            databaseSpecificErrorHandler,\n            routingTable,\n            connection,\n            transformed,\n            _args = arguments;\n\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref2 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, accessMode = _ref2.accessMode, database = _ref2.database, bookmark = _ref2.bookmark;\n                databaseSpecificErrorHandler = new _connectionErrorHandler[\"default\"](_error.SESSION_EXPIRED, function (error, address) {\n                  return _this2._handleUnavailability(error, address, database);\n                }, function (error, address) {\n                  return _this2._handleWriteFailure(error, address, database);\n                });\n                _context.next = 4;\n                return this._freshRoutingTable({\n                  accessMode: accessMode,\n                  database: database || DEFAULT_DB_NAME,\n                  bookmark: bookmark\n                });\n\n              case 4:\n                routingTable = _context.sent;\n\n                if (!(accessMode === _driver.READ)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                address = this._loadBalancingStrategy.selectReader(routingTable.readers);\n                name = 'read';\n                _context.next = 16;\n                break;\n\n              case 10:\n                if (!(accessMode === _driver.WRITE)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                address = this._loadBalancingStrategy.selectWriter(routingTable.writers);\n                name = 'write';\n                _context.next = 16;\n                break;\n\n              case 15:\n                throw (0, _error.newError)('Illegal mode ' + accessMode);\n\n              case 16:\n                if (address) {\n                  _context.next = 18;\n                  break;\n                }\n\n                throw (0, _error.newError)(\"Failed to obtain connection towards \".concat(name, \" server. Known routing table is: \").concat(routingTable), _error.SESSION_EXPIRED);\n\n              case 18:\n                _context.prev = 18;\n                _context.next = 21;\n                return this._acquireConnectionToServer(address, name, routingTable);\n\n              case 21:\n                connection = _context.sent;\n                return _context.abrupt(\"return\", new _connectionDelegate[\"default\"](connection, databaseSpecificErrorHandler));\n\n              case 25:\n                _context.prev = 25;\n                _context.t0 = _context[\"catch\"](18);\n                transformed = databaseSpecificErrorHandler.handleAndTransformError(_context.t0, address);\n                throw transformed;\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[18, 25]]);\n      }));\n\n      function acquireConnection() {\n        return _acquireConnection.apply(this, arguments);\n      }\n\n      return acquireConnection;\n    }()\n  }, {\n    key: \"_hasProtocolVersion\",\n    value: function () {\n      var _hasProtocolVersion2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee2(versionPredicate) {\n        var addresses, lastError, i, connection, protocol;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._resolveSeedRouter(this._seedRouter);\n\n              case 2:\n                addresses = _context2.sent;\n                i = 0;\n\n              case 4:\n                if (!(i < addresses.length)) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                connection = _connectionChannel[\"default\"].create(addresses[i], this._config, this._createConnectionErrorHandler(), this._log);\n                _context2.prev = 6;\n                _context2.next = 9;\n                return connection._negotiateProtocol();\n\n              case 9:\n                protocol = connection.protocol();\n\n                if (!protocol) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", versionPredicate(protocol.version));\n\n              case 12:\n                return _context2.abrupt(\"return\", false);\n\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](6);\n                lastError = _context2.t0;\n\n              case 18:\n                _context2.prev = 18;\n                _context2.next = 21;\n                return connection.close();\n\n              case 21:\n                return _context2.finish(18);\n\n              case 22:\n                i++;\n                _context2.next = 4;\n                break;\n\n              case 25:\n                if (!lastError) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                throw lastError;\n\n              case 27:\n                return _context2.abrupt(\"return\", false);\n\n              case 28:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 15, 18, 22]]);\n      }));\n\n      function _hasProtocolVersion(_x) {\n        return _hasProtocolVersion2.apply(this, arguments);\n      }\n\n      return _hasProtocolVersion;\n    }()\n  }, {\n    key: \"supportsMultiDb\",\n    value: function () {\n      var _supportsMultiDb = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee3() {\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._hasProtocolVersion(function (version) {\n                  return version >= _constants.BOLT_PROTOCOL_V4;\n                });\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function supportsMultiDb() {\n        return _supportsMultiDb.apply(this, arguments);\n      }\n\n      return supportsMultiDb;\n    }()\n  }, {\n    key: \"supportsTransactionConfig\",\n    value: function () {\n      var _supportsTransactionConfig = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee4() {\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._hasProtocolVersion(function (version) {\n                  return version >= _constants.BOLT_PROTOCOL_V3;\n                });\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function supportsTransactionConfig() {\n        return _supportsTransactionConfig.apply(this, arguments);\n      }\n\n      return supportsTransactionConfig;\n    }()\n  }, {\n    key: \"forget\",\n    value: function forget(address, database) {\n      if (database || database === '') {\n        this._routingTables[database].forget(address);\n      } else {\n        Object.values(this._routingTables).forEach(function (routingTable) {\n          return routingTable.forget(address);\n        });\n      } // We're firing and forgetting this operation explicitly and listening for any\n      // errors to avoid unhandled promise rejection\n\n\n      this._connectionPool.purge(address)[\"catch\"](function () {});\n    }\n  }, {\n    key: \"forgetWriter\",\n    value: function forgetWriter(address, database) {\n      if (database || database === '') {\n        this._routingTables[database].forgetWriter(address);\n      } else {\n        Object.values(this._routingTables).forEach(function (routingTable) {\n          return routingTable.forgetWriter(address);\n        });\n      }\n    }\n  }, {\n    key: \"_acquireConnectionToServer\",\n    value: function _acquireConnectionToServer(address, serverName, routingTable) {\n      return this._connectionPool.acquire(address);\n    }\n  }, {\n    key: \"_freshRoutingTable\",\n    value: function _freshRoutingTable() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          accessMode = _ref3.accessMode,\n          database = _ref3.database,\n          bookmark = _ref3.bookmark;\n\n      var currentRoutingTable = this._routingTables[database] || new _routingTable[\"default\"]({\n        database: database\n      });\n\n      if (!currentRoutingTable.isStaleFor(accessMode)) {\n        return currentRoutingTable;\n      }\n\n      this._log.info(\"Routing table is stale for database: \\\"\".concat(database, \"\\\" and access mode: \\\"\").concat(accessMode, \"\\\": \").concat(currentRoutingTable));\n\n      return this._refreshRoutingTable(currentRoutingTable, bookmark);\n    }\n  }, {\n    key: \"_refreshRoutingTable\",\n    value: function _refreshRoutingTable(currentRoutingTable, bookmark) {\n      var knownRouters = currentRoutingTable.routers;\n\n      if (this._useSeedRouter) {\n        return this._fetchRoutingTableFromSeedRouterFallbackToKnownRouters(knownRouters, currentRoutingTable, bookmark);\n      }\n\n      return this._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter(knownRouters, currentRoutingTable, bookmark);\n    }\n  }, {\n    key: \"_fetchRoutingTableFromSeedRouterFallbackToKnownRouters\",\n    value: function () {\n      var _fetchRoutingTableFromSeedRouterFallbackToKnownRouters2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee5(knownRouters, currentRoutingTable, bookmark) {\n        var seenRouters, newRoutingTable;\n        return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // we start with seed router, no routers were probed before\n                seenRouters = [];\n                _context5.next = 3;\n                return this._fetchRoutingTableUsingSeedRouter(seenRouters, this._seedRouter, currentRoutingTable, bookmark);\n\n              case 3:\n                newRoutingTable = _context5.sent;\n\n                if (!newRoutingTable) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                this._useSeedRouter = false;\n                _context5.next = 11;\n                break;\n\n              case 8:\n                _context5.next = 10;\n                return this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmark);\n\n              case 10:\n                newRoutingTable = _context5.sent;\n\n              case 11:\n                _context5.next = 13;\n                return this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable);\n\n              case 13:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _fetchRoutingTableFromSeedRouterFallbackToKnownRouters(_x2, _x3, _x4) {\n        return _fetchRoutingTableFromSeedRouterFallbackToKnownRouters2.apply(this, arguments);\n      }\n\n      return _fetchRoutingTableFromSeedRouterFallbackToKnownRouters;\n    }()\n  }, {\n    key: \"_fetchRoutingTableFromKnownRoutersFallbackToSeedRouter\",\n    value: function () {\n      var _fetchRoutingTableFromKnownRoutersFallbackToSeedRouter2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee6(knownRouters, currentRoutingTable, bookmark) {\n        var newRoutingTable;\n        return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmark);\n\n              case 2:\n                newRoutingTable = _context6.sent;\n\n                if (newRoutingTable) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                _context6.next = 6;\n                return this._fetchRoutingTableUsingSeedRouter(knownRouters, this._seedRouter, currentRoutingTable, bookmark);\n\n              case 6:\n                newRoutingTable = _context6.sent;\n\n              case 7:\n                _context6.next = 9;\n                return this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable);\n\n              case 9:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _fetchRoutingTableFromKnownRoutersFallbackToSeedRouter(_x5, _x6, _x7) {\n        return _fetchRoutingTableFromKnownRoutersFallbackToSeedRouter2.apply(this, arguments);\n      }\n\n      return _fetchRoutingTableFromKnownRoutersFallbackToSeedRouter;\n    }()\n  }, {\n    key: \"_fetchRoutingTableUsingKnownRouters\",\n    value: function () {\n      var _fetchRoutingTableUsingKnownRouters2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee7(knownRouters, currentRoutingTable, bookmark) {\n        var newRoutingTable, lastRouterIndex;\n        return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._fetchRoutingTable(knownRouters, currentRoutingTable, bookmark);\n\n              case 2:\n                newRoutingTable = _context7.sent;\n\n                if (!newRoutingTable) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", newRoutingTable);\n\n              case 5:\n                // returned routing table was undefined, this means a connection error happened and the last known\n                // router did not return a valid routing table, so we need to forget it\n                lastRouterIndex = knownRouters.length - 1;\n\n                RoutingConnectionProvider._forgetRouter(currentRoutingTable, knownRouters, lastRouterIndex);\n\n                return _context7.abrupt(\"return\", null);\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _fetchRoutingTableUsingKnownRouters(_x8, _x9, _x10) {\n        return _fetchRoutingTableUsingKnownRouters2.apply(this, arguments);\n      }\n\n      return _fetchRoutingTableUsingKnownRouters;\n    }()\n  }, {\n    key: \"_fetchRoutingTableUsingSeedRouter\",\n    value: function () {\n      var _fetchRoutingTableUsingSeedRouter2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee8(seenRouters, seedRouter, routingTable, bookmark) {\n        var resolvedAddresses, newAddresses;\n        return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this._resolveSeedRouter(seedRouter);\n\n              case 2:\n                resolvedAddresses = _context8.sent;\n                // filter out all addresses that we've already tried\n                newAddresses = resolvedAddresses.filter(function (address) {\n                  return seenRouters.indexOf(address) < 0;\n                });\n                _context8.next = 6;\n                return this._fetchRoutingTable(newAddresses, routingTable, bookmark);\n\n              case 6:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function _fetchRoutingTableUsingSeedRouter(_x11, _x12, _x13, _x14) {\n        return _fetchRoutingTableUsingSeedRouter2.apply(this, arguments);\n      }\n\n      return _fetchRoutingTableUsingSeedRouter;\n    }()\n  }, {\n    key: \"_resolveSeedRouter\",\n    value: function () {\n      var _resolveSeedRouter2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee9(seedRouter) {\n        var _this3 = this;\n\n        var resolvedAddresses, dnsResolvedAddresses;\n        return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._hostNameResolver.resolve(seedRouter);\n\n              case 2:\n                resolvedAddresses = _context9.sent;\n                _context9.next = 5;\n                return Promise.all(resolvedAddresses.map(function (address) {\n                  return _this3._dnsResolver.resolve(address);\n                }));\n\n              case 5:\n                dnsResolvedAddresses = _context9.sent;\n                return _context9.abrupt(\"return\", [].concat.apply([], dnsResolvedAddresses));\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function _resolveSeedRouter(_x15) {\n        return _resolveSeedRouter2.apply(this, arguments);\n      }\n\n      return _resolveSeedRouter;\n    }()\n  }, {\n    key: \"_fetchRoutingTable\",\n    value: function _fetchRoutingTable(routerAddresses, routingTable, bookmark) {\n      var _this4 = this;\n\n      return routerAddresses.reduce(\n      /*#__PURE__*/\n      function () {\n        var _ref4 = (0, _asyncToGenerator2[\"default\"])(\n        /*#__PURE__*/\n        _regenerator[\"default\"].mark(function _callee10(refreshedTablePromise, currentRouter, currentIndex) {\n          var newRoutingTable, previousRouterIndex, session;\n          return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  _context10.next = 2;\n                  return refreshedTablePromise;\n\n                case 2:\n                  newRoutingTable = _context10.sent;\n\n                  if (!newRoutingTable) {\n                    _context10.next = 7;\n                    break;\n                  }\n\n                  return _context10.abrupt(\"return\", newRoutingTable);\n\n                case 7:\n                  // returned routing table was undefined, this means a connection error happened and we need to forget the\n                  // previous router and try the next one\n                  previousRouterIndex = currentIndex - 1;\n\n                  RoutingConnectionProvider._forgetRouter(routingTable, routerAddresses, previousRouterIndex);\n\n                case 9:\n                  _context10.next = 11;\n                  return _this4._createSessionForRediscovery(currentRouter, bookmark);\n\n                case 11:\n                  session = _context10.sent;\n\n                  if (!session) {\n                    _context10.next = 27;\n                    break;\n                  }\n\n                  _context10.prev = 13;\n                  _context10.next = 16;\n                  return _this4._rediscovery.lookupRoutingTableOnRouter(session, routingTable.database, currentRouter);\n\n                case 16:\n                  return _context10.abrupt(\"return\", _context10.sent);\n\n                case 19:\n                  _context10.prev = 19;\n                  _context10.t0 = _context10[\"catch\"](13);\n\n                  if (!(_context10.t0 && _context10.t0.code === DATABASE_NOT_FOUND_ERROR_CODE)) {\n                    _context10.next = 23;\n                    break;\n                  }\n\n                  throw _context10.t0;\n\n                case 23:\n                  _this4._log.warn(\"unable to fetch routing table because of an error \".concat(_context10.t0));\n\n                  return _context10.abrupt(\"return\", null);\n\n                case 25:\n                  _context10.next = 28;\n                  break;\n\n                case 27:\n                  return _context10.abrupt(\"return\", null);\n\n                case 28:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee10, null, [[13, 19]]);\n        }));\n\n        return function (_x16, _x17, _x18) {\n          return _ref4.apply(this, arguments);\n        };\n      }(), Promise.resolve(null));\n    }\n  }, {\n    key: \"_createSessionForRediscovery\",\n    value: function () {\n      var _createSessionForRediscovery2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee11(routerAddress, bookmark) {\n        var connection, connectionProvider, version;\n        return _regenerator[\"default\"].wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.prev = 0;\n                _context11.next = 3;\n                return this._connectionPool.acquire(routerAddress);\n\n              case 3:\n                connection = _context11.sent;\n                connectionProvider = new _connectionProviderSingle[\"default\"](connection);\n                version = _serverVersion.ServerVersion.fromString(connection.version);\n\n                if (!(version.compareTo(_serverVersion.VERSION_4_0_0) < 0)) {\n                  _context11.next = 8;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\", new _session[\"default\"]({\n                  mode: _driver.WRITE,\n                  bookmark: _bookmark[\"default\"].empty(),\n                  connectionProvider: connectionProvider\n                }));\n\n              case 8:\n                return _context11.abrupt(\"return\", new _session[\"default\"]({\n                  mode: _driver.READ,\n                  database: SYSTEM_DB_NAME,\n                  bookmark: bookmark,\n                  connectionProvider: connectionProvider\n                }));\n\n              case 11:\n                _context11.prev = 11;\n                _context11.t0 = _context11[\"catch\"](0);\n\n                if (!(_context11.t0 && _context11.t0.code === UNAUTHORIZED_ERROR_CODE)) {\n                  _context11.next = 15;\n                  break;\n                }\n\n                throw _context11.t0;\n\n              case 15:\n                return _context11.abrupt(\"return\", null);\n\n              case 16:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[0, 11]]);\n      }));\n\n      function _createSessionForRediscovery(_x19, _x20) {\n        return _createSessionForRediscovery2.apply(this, arguments);\n      }\n\n      return _createSessionForRediscovery;\n    }()\n  }, {\n    key: \"_applyRoutingTableIfPossible\",\n    value: function () {\n      var _applyRoutingTableIfPossible2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee12(currentRoutingTable, newRoutingTable) {\n        return _regenerator[\"default\"].wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (newRoutingTable) {\n                  _context12.next = 2;\n                  break;\n                }\n\n                throw (0, _error.newError)(\"Could not perform discovery. No routing servers available. Known routing table: \".concat(currentRoutingTable), _error.SERVICE_UNAVAILABLE);\n\n              case 2:\n                if (newRoutingTable.writers.length === 0) {\n                  // use seed router next time. this is important when cluster is partitioned. it tries to make sure driver\n                  // does not always get routing table without writers because it talks exclusively to a minority partition\n                  this._useSeedRouter = true;\n                }\n\n                _context12.next = 5;\n                return this._updateRoutingTable(newRoutingTable);\n\n              case 5:\n                return _context12.abrupt(\"return\", newRoutingTable);\n\n              case 6:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function _applyRoutingTableIfPossible(_x21, _x22) {\n        return _applyRoutingTableIfPossible2.apply(this, arguments);\n      }\n\n      return _applyRoutingTableIfPossible;\n    }()\n  }, {\n    key: \"_updateRoutingTable\",\n    value: function () {\n      var _updateRoutingTable2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee13(newRoutingTable) {\n        var _this5 = this;\n\n        return _regenerator[\"default\"].wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this._connectionPool.keepAll(newRoutingTable.allServers());\n\n              case 2:\n                // filter out expired to purge (expired for a pre-configured amount of time) routing table entries\n                Object.values(this._routingTables).forEach(function (value) {\n                  if (value.isExpiredFor(_this5._routingTablePurgeDelay)) {\n                    delete _this5._routingTables[value.database];\n                  }\n                }); // make this driver instance aware of the new table\n\n                this._routingTables[newRoutingTable.database] = newRoutingTable;\n\n                this._log.info(\"Updated routing table \".concat(newRoutingTable));\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function _updateRoutingTable(_x23) {\n        return _updateRoutingTable2.apply(this, arguments);\n      }\n\n      return _updateRoutingTable;\n    }()\n  }], [{\n    key: \"_forgetRouter\",\n    value: function _forgetRouter(routingTable, routersArray, routerIndex) {\n      var address = routersArray[routerIndex];\n\n      if (routingTable && address) {\n        routingTable.forgetRouter(address);\n      }\n    }\n  }]);\n  return RoutingConnectionProvider;\n}(_connectionProviderPooled[\"default\"]);\n\nexports[\"default\"] = RoutingConnectionProvider;"]},"metadata":{},"sourceType":"script"}