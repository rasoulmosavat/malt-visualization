{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EMPTY_CONNECTION_HOLDER = exports[\"default\"] = void 0;\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _error = require(\"../error\");\n\nvar _util = require(\"./util\");\n\nvar _constants = require(\"./constants\");\n\nvar _bookmark = _interopRequireDefault(require(\"./bookmark\"));\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Utility to lazily initialize connections and return them back to the pool when unused.\n */\n\n\nvar ConnectionHolder = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {string} mode - the access mode for new connection holder.\n   * @param {string} database - the target database name.\n   * @param {ConnectionProvider} connectionProvider - the connection provider to acquire connections from.\n   */\n  function ConnectionHolder() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$mode = _ref.mode,\n        mode = _ref$mode === void 0 ? _constants.ACCESS_MODE_WRITE : _ref$mode,\n        _ref$database = _ref.database,\n        database = _ref$database === void 0 ? '' : _ref$database,\n        bookmark = _ref.bookmark,\n        connectionProvider = _ref.connectionProvider;\n\n    (0, _classCallCheck2[\"default\"])(this, ConnectionHolder);\n    this._mode = mode;\n    this._database = database ? (0, _util.assertString)(database, 'database') : '';\n    this._bookmark = bookmark || _bookmark[\"default\"].empty();\n    this._connectionProvider = connectionProvider;\n    this._referenceCount = 0;\n    this._connectionPromise = Promise.resolve(null);\n  }\n  /**\n   * Returns the assigned access mode.\n   * @returns {string} access mode\n   */\n\n\n  (0, _createClass2[\"default\"])(ConnectionHolder, [{\n    key: \"mode\",\n    value: function mode() {\n      return this._mode;\n    }\n    /**\n     * Returns the target database name\n     * @returns {string} the database name\n     */\n\n  }, {\n    key: \"database\",\n    value: function database() {\n      return this._database;\n    }\n    /**\n     * Make this holder initialize new connection if none exists already.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"initializeConnection\",\n    value: function initializeConnection() {\n      if (this._referenceCount === 0) {\n        this._connectionPromise = this._connectionProvider.acquireConnection({\n          accessMode: this._mode,\n          database: this._database,\n          bookmark: this._bookmark\n        });\n      } else {\n        this._referenceCount++;\n        return false;\n      }\n\n      this._referenceCount++;\n      return true;\n    }\n    /**\n     * Get the current connection promise.\n     * @return {Promise<Connection>} promise resolved with the current connection.\n     */\n\n  }, {\n    key: \"getConnection\",\n    value: function getConnection() {\n      return this._connectionPromise;\n    }\n    /**\n     * Notify this holder that single party does not require current connection any more.\n     * @return {Promise<Connection>} promise resolved with the current connection, never a rejected promise.\n     */\n\n  }, {\n    key: \"releaseConnection\",\n    value: function releaseConnection() {\n      if (this._referenceCount === 0) {\n        return this._connectionPromise;\n      }\n\n      this._referenceCount--;\n\n      if (this._referenceCount === 0) {\n        return this._releaseConnection();\n      }\n\n      return this._connectionPromise;\n    }\n    /**\n     * Closes this holder and releases current connection (if any) despite any existing users.\n     * @return {Promise<Connection>} promise resolved when current connection is released to the pool.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._referenceCount === 0) {\n        return this._connectionPromise;\n      }\n\n      this._referenceCount = 0;\n      return this._releaseConnection();\n    }\n    /**\n     * Return the current pooled connection instance to the connection pool.\n     * We don't pool Session instances, to avoid users using the Session after they've called close.\n     * The `Session` object is just a thin wrapper around Connection anyway, so it makes little difference.\n     * @return {Promise} - promise resolved then connection is returned to the pool.\n     * @private\n     */\n\n  }, {\n    key: \"_releaseConnection\",\n    value: function _releaseConnection() {\n      this._connectionPromise = this._connectionPromise.then(function (connection) {\n        if (connection) {\n          return connection.resetAndFlush()[\"catch\"](ignoreError).then(function () {\n            return connection._release();\n          });\n        } else {\n          return Promise.resolve();\n        }\n      })[\"catch\"](ignoreError);\n      return this._connectionPromise;\n    }\n  }]);\n  return ConnectionHolder;\n}();\n\nexports[\"default\"] = ConnectionHolder;\n\nvar EmptyConnectionHolder = /*#__PURE__*/function (_ConnectionHolder) {\n  (0, _inherits2[\"default\"])(EmptyConnectionHolder, _ConnectionHolder);\n\n  function EmptyConnectionHolder() {\n    (0, _classCallCheck2[\"default\"])(this, EmptyConnectionHolder);\n    return (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(EmptyConnectionHolder).apply(this, arguments));\n  }\n\n  (0, _createClass2[\"default\"])(EmptyConnectionHolder, [{\n    key: \"initializeConnection\",\n    value: function initializeConnection() {\n      // nothing to initialize\n      return true;\n    }\n  }, {\n    key: \"getConnection\",\n    value: function getConnection() {\n      return Promise.reject((0, _error.newError)('This connection holder does not serve connections'));\n    }\n  }, {\n    key: \"releaseConnection\",\n    value: function releaseConnection() {\n      return Promise.resolve();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return Promise.resolve();\n    }\n  }]);\n  return EmptyConnectionHolder;\n}(ConnectionHolder); // eslint-disable-next-line handle-callback-err\n\n\nfunction ignoreError(error) {}\n/**\n * Connection holder that does not manage any connections.\n * @type {ConnectionHolder}\n */\n\n\nvar EMPTY_CONNECTION_HOLDER = new EmptyConnectionHolder();\nexports.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER;","map":{"version":3,"sources":["d:/webback/pro5/node_modules/neo4j-driver/lib/internal/connection-holder.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","EMPTY_CONNECTION_HOLDER","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","_classCallCheck2","_createClass2","_error","_util","_constants","_bookmark","ConnectionHolder","_ref","arguments","length","undefined","_ref$mode","mode","ACCESS_MODE_WRITE","_ref$database","database","bookmark","connectionProvider","_mode","_database","assertString","empty","_connectionProvider","_referenceCount","_connectionPromise","Promise","resolve","key","initializeConnection","acquireConnection","accessMode","getConnection","releaseConnection","_releaseConnection","close","then","connection","resetAndFlush","ignoreError","_release","EmptyConnectionHolder","_ConnectionHolder","apply","reject","newError","error"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EMPTY_CONNECTION_HOLDER = exports[\"default\"] = void 0;\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _error = require(\"../error\");\n\nvar _util = require(\"./util\");\n\nvar _constants = require(\"./constants\");\n\nvar _bookmark = _interopRequireDefault(require(\"./bookmark\"));\n\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Utility to lazily initialize connections and return them back to the pool when unused.\n */\nvar ConnectionHolder =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {string} mode - the access mode for new connection holder.\n   * @param {string} database - the target database name.\n   * @param {ConnectionProvider} connectionProvider - the connection provider to acquire connections from.\n   */\n  function ConnectionHolder() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$mode = _ref.mode,\n        mode = _ref$mode === void 0 ? _constants.ACCESS_MODE_WRITE : _ref$mode,\n        _ref$database = _ref.database,\n        database = _ref$database === void 0 ? '' : _ref$database,\n        bookmark = _ref.bookmark,\n        connectionProvider = _ref.connectionProvider;\n\n    (0, _classCallCheck2[\"default\"])(this, ConnectionHolder);\n    this._mode = mode;\n    this._database = database ? (0, _util.assertString)(database, 'database') : '';\n    this._bookmark = bookmark || _bookmark[\"default\"].empty();\n    this._connectionProvider = connectionProvider;\n    this._referenceCount = 0;\n    this._connectionPromise = Promise.resolve(null);\n  }\n  /**\n   * Returns the assigned access mode.\n   * @returns {string} access mode\n   */\n\n\n  (0, _createClass2[\"default\"])(ConnectionHolder, [{\n    key: \"mode\",\n    value: function mode() {\n      return this._mode;\n    }\n    /**\n     * Returns the target database name\n     * @returns {string} the database name\n     */\n\n  }, {\n    key: \"database\",\n    value: function database() {\n      return this._database;\n    }\n    /**\n     * Make this holder initialize new connection if none exists already.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"initializeConnection\",\n    value: function initializeConnection() {\n      if (this._referenceCount === 0) {\n        this._connectionPromise = this._connectionProvider.acquireConnection({\n          accessMode: this._mode,\n          database: this._database,\n          bookmark: this._bookmark\n        });\n      } else {\n        this._referenceCount++;\n        return false;\n      }\n\n      this._referenceCount++;\n      return true;\n    }\n    /**\n     * Get the current connection promise.\n     * @return {Promise<Connection>} promise resolved with the current connection.\n     */\n\n  }, {\n    key: \"getConnection\",\n    value: function getConnection() {\n      return this._connectionPromise;\n    }\n    /**\n     * Notify this holder that single party does not require current connection any more.\n     * @return {Promise<Connection>} promise resolved with the current connection, never a rejected promise.\n     */\n\n  }, {\n    key: \"releaseConnection\",\n    value: function releaseConnection() {\n      if (this._referenceCount === 0) {\n        return this._connectionPromise;\n      }\n\n      this._referenceCount--;\n\n      if (this._referenceCount === 0) {\n        return this._releaseConnection();\n      }\n\n      return this._connectionPromise;\n    }\n    /**\n     * Closes this holder and releases current connection (if any) despite any existing users.\n     * @return {Promise<Connection>} promise resolved when current connection is released to the pool.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._referenceCount === 0) {\n        return this._connectionPromise;\n      }\n\n      this._referenceCount = 0;\n      return this._releaseConnection();\n    }\n    /**\n     * Return the current pooled connection instance to the connection pool.\n     * We don't pool Session instances, to avoid users using the Session after they've called close.\n     * The `Session` object is just a thin wrapper around Connection anyway, so it makes little difference.\n     * @return {Promise} - promise resolved then connection is returned to the pool.\n     * @private\n     */\n\n  }, {\n    key: \"_releaseConnection\",\n    value: function _releaseConnection() {\n      this._connectionPromise = this._connectionPromise.then(function (connection) {\n        if (connection) {\n          return connection.resetAndFlush()[\"catch\"](ignoreError).then(function () {\n            return connection._release();\n          });\n        } else {\n          return Promise.resolve();\n        }\n      })[\"catch\"](ignoreError);\n      return this._connectionPromise;\n    }\n  }]);\n  return ConnectionHolder;\n}();\n\nexports[\"default\"] = ConnectionHolder;\n\nvar EmptyConnectionHolder =\n/*#__PURE__*/\nfunction (_ConnectionHolder) {\n  (0, _inherits2[\"default\"])(EmptyConnectionHolder, _ConnectionHolder);\n\n  function EmptyConnectionHolder() {\n    (0, _classCallCheck2[\"default\"])(this, EmptyConnectionHolder);\n    return (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(EmptyConnectionHolder).apply(this, arguments));\n  }\n\n  (0, _createClass2[\"default\"])(EmptyConnectionHolder, [{\n    key: \"initializeConnection\",\n    value: function initializeConnection() {\n      // nothing to initialize\n      return true;\n    }\n  }, {\n    key: \"getConnection\",\n    value: function getConnection() {\n      return Promise.reject((0, _error.newError)('This connection holder does not serve connections'));\n    }\n  }, {\n    key: \"releaseConnection\",\n    value: function releaseConnection() {\n      return Promise.resolve();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return Promise.resolve();\n    }\n  }]);\n  return EmptyConnectionHolder;\n}(ConnectionHolder); // eslint-disable-next-line handle-callback-err\n\n\nfunction ignoreError(error) {}\n/**\n * Connection holder that does not manage any connections.\n * @type {ConnectionHolder}\n */\n\n\nvar EMPTY_CONNECTION_HOLDER = new EmptyConnectionHolder();\nexports.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER;"]},"metadata":{},"sourceType":"script"}