{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _boltProtocolUtil = require(\"./bolt-protocol-util\");\n\nvar _bookmark = _interopRequireDefault(require(\"./bookmark\"));\n\nvar _chunking = require(\"./chunking\");\n\nvar _connection = _interopRequireDefault(require(\"./connection\"));\n\nvar _constants = require(\"./constants\");\n\nvar v1 = _interopRequireWildcard(require(\"./packstream-v1\"));\n\nvar _requestMessage = _interopRequireDefault(require(\"./request-message\"));\n\nvar _streamObservers = require(\"./stream-observers\");\n\nvar _txConfig = _interopRequireDefault(require(\"./tx-config\"));\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar BoltProtocol = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {Connection} connection the connection.\n   * @param {Chunker} chunker the chunker.\n   * @param {boolean} disableLosslessIntegers if this connection should convert all received integers to native JS numbers.\n   */\n  function BoltProtocol(connection, chunker, disableLosslessIntegers) {\n    (0, _classCallCheck2[\"default\"])(this, BoltProtocol);\n    this._connection = connection;\n    this._packer = this._createPacker(chunker);\n    this._unpacker = this._createUnpacker(disableLosslessIntegers);\n  }\n  /**\n   * Returns the numerical version identifier for this protocol\n   */\n\n\n  (0, _createClass2[\"default\"])(BoltProtocol, [{\n    key: \"packer\",\n\n    /**\n     * Get the packer.\n     * @return {Packer} the protocol's packer.\n     */\n    value: function packer() {\n      return this._packer;\n    }\n    /**\n     * Get the unpacker.\n     * @return {Unpacker} the protocol's unpacker.\n     */\n\n  }, {\n    key: \"unpacker\",\n    value: function unpacker() {\n      return this._unpacker;\n    }\n    /**\n     * Transform metadata received in SUCCESS message before it is passed to the handler.\n     * @param {Object} metadata the received metadata.\n     * @return {Object} transformed metadata.\n     */\n\n  }, {\n    key: \"transformMetadata\",\n    value: function transformMetadata(metadata) {\n      return metadata;\n    }\n    /**\n     * Perform initialization and authentication of the underlying connection.\n     * @param {Object} param\n     * @param {string} param.userAgent the user agent.\n     * @param {Object} param.authToken the authentication token.\n     * @param {function(err: Error)} param.onError the callback to invoke on error.\n     * @param {function()} param.onComplete the callback to invoke on completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          userAgent = _ref.userAgent,\n          authToken = _ref.authToken,\n          onError = _ref.onError,\n          onComplete = _ref.onComplete;\n\n      var observer = new _streamObservers.LoginObserver({\n        connection: this._connection,\n        afterError: onError,\n        afterComplete: onComplete\n      });\n\n      this._connection.write(_requestMessage[\"default\"].init(userAgent, authToken), observer, true);\n\n      return observer;\n    }\n    /**\n     * Perform protocol related operations for closing this connection\n     */\n\n  }, {\n    key: \"prepareToClose\",\n    value: function prepareToClose() {} // no need to notify the database in this protocol version\n\n    /**\n     * Begin an explicit transaction.\n     * @param {Object} param\n     * @param {Bookmark} param.bookmark the bookmark.\n     * @param {TxConfig} param.txConfig the configuration.\n     * @param {string} param.database the target database name.\n     * @param {string} param.mode the access mode.\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n\n  }, {\n    key: \"beginTransaction\",\n    value: function beginTransaction() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          bookmark = _ref2.bookmark,\n          txConfig = _ref2.txConfig,\n          database = _ref2.database,\n          mode = _ref2.mode,\n          beforeError = _ref2.beforeError,\n          afterError = _ref2.afterError,\n          beforeComplete = _ref2.beforeComplete,\n          afterComplete = _ref2.afterComplete;\n\n      return this.run('BEGIN', bookmark ? bookmark.asBeginTransactionParameters() : {}, {\n        bookmark: bookmark,\n        txConfig: txConfig,\n        database: database,\n        mode: mode,\n        beforeError: beforeError,\n        afterError: afterError,\n        beforeComplete: beforeComplete,\n        afterComplete: afterComplete,\n        flush: false\n      });\n    }\n    /**\n     * Commit the explicit transaction.\n     * @param {Object} param\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n\n  }, {\n    key: \"commitTransaction\",\n    value: function commitTransaction() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          beforeError = _ref3.beforeError,\n          afterError = _ref3.afterError,\n          beforeComplete = _ref3.beforeComplete,\n          afterComplete = _ref3.afterComplete; // WRITE access mode is used as a place holder here, it has\n      // no effect on behaviour for Bolt V1 & V2\n\n\n      return this.run('COMMIT', {}, {\n        bookmark: _bookmark[\"default\"].empty(),\n        txConfig: _txConfig[\"default\"].empty(),\n        mode: _constants.ACCESS_MODE_WRITE,\n        beforeError: beforeError,\n        afterError: afterError,\n        beforeComplete: beforeComplete,\n        afterComplete: afterComplete\n      });\n    }\n    /**\n     * Rollback the explicit transaction.\n     * @param {Object} param\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n\n  }, {\n    key: \"rollbackTransaction\",\n    value: function rollbackTransaction() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          beforeError = _ref4.beforeError,\n          afterError = _ref4.afterError,\n          beforeComplete = _ref4.beforeComplete,\n          afterComplete = _ref4.afterComplete; // WRITE access mode is used as a place holder here, it has\n      // no effect on behaviour for Bolt V1 & V2\n\n\n      return this.run('ROLLBACK', {}, {\n        bookmark: _bookmark[\"default\"].empty(),\n        txConfig: _txConfig[\"default\"].empty(),\n        mode: _constants.ACCESS_MODE_WRITE,\n        beforeError: beforeError,\n        afterError: afterError,\n        beforeComplete: beforeComplete,\n        afterComplete: afterComplete\n      });\n    }\n    /**\n     * Send a Cypher query through the underlying connection.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @param {Object} param\n     * @param {Bookmark} param.bookmark the bookmark.\n     * @param {TxConfig} param.txConfig the transaction configuration.\n     * @param {string} param.database the target database name.\n     * @param {string} param.mode the access mode.\n     * @param {function(keys: string[])} param.beforeKeys the callback to invoke before handling the keys.\n     * @param {function(keys: string[])} param.afterKeys the callback to invoke after handling the keys.\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @param {boolean} param.flush whether to flush the buffered messages.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(query, parameters) {\n      var _ref5 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          bookmark = _ref5.bookmark,\n          txConfig = _ref5.txConfig,\n          database = _ref5.database,\n          mode = _ref5.mode,\n          beforeKeys = _ref5.beforeKeys,\n          afterKeys = _ref5.afterKeys,\n          beforeError = _ref5.beforeError,\n          afterError = _ref5.afterError,\n          beforeComplete = _ref5.beforeComplete,\n          afterComplete = _ref5.afterComplete,\n          _ref5$flush = _ref5.flush,\n          flush = _ref5$flush === void 0 ? true : _ref5$flush;\n\n      var observer = new _streamObservers.ResultStreamObserver({\n        connection: this._connection,\n        beforeKeys: beforeKeys,\n        afterKeys: afterKeys,\n        beforeError: beforeError,\n        afterError: afterError,\n        beforeComplete: beforeComplete,\n        afterComplete: afterComplete\n      }); // bookmark and mode are ignored in this version of the protocol\n\n      (0, _boltProtocolUtil.assertTxConfigIsEmpty)(txConfig, this._connection, observer); // passing in a database name on this protocol version throws an error\n\n      (0, _boltProtocolUtil.assertDatabaseIsEmpty)(database, this._connection, observer);\n\n      this._connection.write(_requestMessage[\"default\"].run(query, parameters), observer, false);\n\n      this._connection.write(_requestMessage[\"default\"].pullAll(), observer, flush);\n\n      return observer;\n    }\n    /**\n     * Send a RESET through the underlying connection.\n     * @param {Object} param\n     * @param {function(err: Error)} param.onError the callback to invoke on error.\n     * @param {function()} param.onComplete the callback to invoke on completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          onError = _ref6.onError,\n          onComplete = _ref6.onComplete;\n\n      var observer = new _streamObservers.ResetObserver({\n        connection: this._connection,\n        onError: onError,\n        onComplete: onComplete\n      });\n\n      this._connection.write(_requestMessage[\"default\"].reset(), observer, true);\n\n      return observer;\n    }\n  }, {\n    key: \"_createPacker\",\n    value: function _createPacker(chunker) {\n      return new v1.Packer(chunker);\n    }\n  }, {\n    key: \"_createUnpacker\",\n    value: function _createUnpacker(disableLosslessIntegers) {\n      return new v1.Unpacker(disableLosslessIntegers);\n    }\n  }, {\n    key: \"version\",\n    get: function get() {\n      return _constants.BOLT_PROTOCOL_V1;\n    }\n  }]);\n  return BoltProtocol;\n}();\n\nexports[\"default\"] = BoltProtocol;","map":{"version":3,"sources":["d:/webback/pro5/node_modules/neo4j-driver/lib/internal/bolt-protocol-v1.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","_classCallCheck2","_createClass2","_boltProtocolUtil","_bookmark","_chunking","_connection","_constants","v1","_requestMessage","_streamObservers","_txConfig","BoltProtocol","connection","chunker","disableLosslessIntegers","_packer","_createPacker","_unpacker","_createUnpacker","key","packer","unpacker","transformMetadata","metadata","initialize","_ref","arguments","length","undefined","userAgent","authToken","onError","onComplete","observer","LoginObserver","afterError","afterComplete","write","init","prepareToClose","beginTransaction","_ref2","bookmark","txConfig","database","mode","beforeError","beforeComplete","run","asBeginTransactionParameters","flush","commitTransaction","_ref3","empty","ACCESS_MODE_WRITE","rollbackTransaction","_ref4","query","parameters","_ref5","beforeKeys","afterKeys","_ref5$flush","ResultStreamObserver","assertTxConfigIsEmpty","assertDatabaseIsEmpty","pullAll","reset","_ref6","ResetObserver","Packer","Unpacker","get","BOLT_PROTOCOL_V1"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _boltProtocolUtil = require(\"./bolt-protocol-util\");\n\nvar _bookmark = _interopRequireDefault(require(\"./bookmark\"));\n\nvar _chunking = require(\"./chunking\");\n\nvar _connection = _interopRequireDefault(require(\"./connection\"));\n\nvar _constants = require(\"./constants\");\n\nvar v1 = _interopRequireWildcard(require(\"./packstream-v1\"));\n\nvar _requestMessage = _interopRequireDefault(require(\"./request-message\"));\n\nvar _streamObservers = require(\"./stream-observers\");\n\nvar _txConfig = _interopRequireDefault(require(\"./tx-config\"));\n\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar BoltProtocol =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {Connection} connection the connection.\n   * @param {Chunker} chunker the chunker.\n   * @param {boolean} disableLosslessIntegers if this connection should convert all received integers to native JS numbers.\n   */\n  function BoltProtocol(connection, chunker, disableLosslessIntegers) {\n    (0, _classCallCheck2[\"default\"])(this, BoltProtocol);\n    this._connection = connection;\n    this._packer = this._createPacker(chunker);\n    this._unpacker = this._createUnpacker(disableLosslessIntegers);\n  }\n  /**\n   * Returns the numerical version identifier for this protocol\n   */\n\n\n  (0, _createClass2[\"default\"])(BoltProtocol, [{\n    key: \"packer\",\n\n    /**\n     * Get the packer.\n     * @return {Packer} the protocol's packer.\n     */\n    value: function packer() {\n      return this._packer;\n    }\n    /**\n     * Get the unpacker.\n     * @return {Unpacker} the protocol's unpacker.\n     */\n\n  }, {\n    key: \"unpacker\",\n    value: function unpacker() {\n      return this._unpacker;\n    }\n    /**\n     * Transform metadata received in SUCCESS message before it is passed to the handler.\n     * @param {Object} metadata the received metadata.\n     * @return {Object} transformed metadata.\n     */\n\n  }, {\n    key: \"transformMetadata\",\n    value: function transformMetadata(metadata) {\n      return metadata;\n    }\n    /**\n     * Perform initialization and authentication of the underlying connection.\n     * @param {Object} param\n     * @param {string} param.userAgent the user agent.\n     * @param {Object} param.authToken the authentication token.\n     * @param {function(err: Error)} param.onError the callback to invoke on error.\n     * @param {function()} param.onComplete the callback to invoke on completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          userAgent = _ref.userAgent,\n          authToken = _ref.authToken,\n          onError = _ref.onError,\n          onComplete = _ref.onComplete;\n\n      var observer = new _streamObservers.LoginObserver({\n        connection: this._connection,\n        afterError: onError,\n        afterComplete: onComplete\n      });\n\n      this._connection.write(_requestMessage[\"default\"].init(userAgent, authToken), observer, true);\n\n      return observer;\n    }\n    /**\n     * Perform protocol related operations for closing this connection\n     */\n\n  }, {\n    key: \"prepareToClose\",\n    value: function prepareToClose() {} // no need to notify the database in this protocol version\n\n    /**\n     * Begin an explicit transaction.\n     * @param {Object} param\n     * @param {Bookmark} param.bookmark the bookmark.\n     * @param {TxConfig} param.txConfig the configuration.\n     * @param {string} param.database the target database name.\n     * @param {string} param.mode the access mode.\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n\n  }, {\n    key: \"beginTransaction\",\n    value: function beginTransaction() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          bookmark = _ref2.bookmark,\n          txConfig = _ref2.txConfig,\n          database = _ref2.database,\n          mode = _ref2.mode,\n          beforeError = _ref2.beforeError,\n          afterError = _ref2.afterError,\n          beforeComplete = _ref2.beforeComplete,\n          afterComplete = _ref2.afterComplete;\n\n      return this.run('BEGIN', bookmark ? bookmark.asBeginTransactionParameters() : {}, {\n        bookmark: bookmark,\n        txConfig: txConfig,\n        database: database,\n        mode: mode,\n        beforeError: beforeError,\n        afterError: afterError,\n        beforeComplete: beforeComplete,\n        afterComplete: afterComplete,\n        flush: false\n      });\n    }\n    /**\n     * Commit the explicit transaction.\n     * @param {Object} param\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n\n  }, {\n    key: \"commitTransaction\",\n    value: function commitTransaction() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          beforeError = _ref3.beforeError,\n          afterError = _ref3.afterError,\n          beforeComplete = _ref3.beforeComplete,\n          afterComplete = _ref3.afterComplete;\n\n      // WRITE access mode is used as a place holder here, it has\n      // no effect on behaviour for Bolt V1 & V2\n      return this.run('COMMIT', {}, {\n        bookmark: _bookmark[\"default\"].empty(),\n        txConfig: _txConfig[\"default\"].empty(),\n        mode: _constants.ACCESS_MODE_WRITE,\n        beforeError: beforeError,\n        afterError: afterError,\n        beforeComplete: beforeComplete,\n        afterComplete: afterComplete\n      });\n    }\n    /**\n     * Rollback the explicit transaction.\n     * @param {Object} param\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n\n  }, {\n    key: \"rollbackTransaction\",\n    value: function rollbackTransaction() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          beforeError = _ref4.beforeError,\n          afterError = _ref4.afterError,\n          beforeComplete = _ref4.beforeComplete,\n          afterComplete = _ref4.afterComplete;\n\n      // WRITE access mode is used as a place holder here, it has\n      // no effect on behaviour for Bolt V1 & V2\n      return this.run('ROLLBACK', {}, {\n        bookmark: _bookmark[\"default\"].empty(),\n        txConfig: _txConfig[\"default\"].empty(),\n        mode: _constants.ACCESS_MODE_WRITE,\n        beforeError: beforeError,\n        afterError: afterError,\n        beforeComplete: beforeComplete,\n        afterComplete: afterComplete\n      });\n    }\n    /**\n     * Send a Cypher query through the underlying connection.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @param {Object} param\n     * @param {Bookmark} param.bookmark the bookmark.\n     * @param {TxConfig} param.txConfig the transaction configuration.\n     * @param {string} param.database the target database name.\n     * @param {string} param.mode the access mode.\n     * @param {function(keys: string[])} param.beforeKeys the callback to invoke before handling the keys.\n     * @param {function(keys: string[])} param.afterKeys the callback to invoke after handling the keys.\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @param {boolean} param.flush whether to flush the buffered messages.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n\n  }, {\n    key: \"run\",\n    value: function run(query, parameters) {\n      var _ref5 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          bookmark = _ref5.bookmark,\n          txConfig = _ref5.txConfig,\n          database = _ref5.database,\n          mode = _ref5.mode,\n          beforeKeys = _ref5.beforeKeys,\n          afterKeys = _ref5.afterKeys,\n          beforeError = _ref5.beforeError,\n          afterError = _ref5.afterError,\n          beforeComplete = _ref5.beforeComplete,\n          afterComplete = _ref5.afterComplete,\n          _ref5$flush = _ref5.flush,\n          flush = _ref5$flush === void 0 ? true : _ref5$flush;\n\n      var observer = new _streamObservers.ResultStreamObserver({\n        connection: this._connection,\n        beforeKeys: beforeKeys,\n        afterKeys: afterKeys,\n        beforeError: beforeError,\n        afterError: afterError,\n        beforeComplete: beforeComplete,\n        afterComplete: afterComplete\n      }); // bookmark and mode are ignored in this version of the protocol\n\n      (0, _boltProtocolUtil.assertTxConfigIsEmpty)(txConfig, this._connection, observer); // passing in a database name on this protocol version throws an error\n\n      (0, _boltProtocolUtil.assertDatabaseIsEmpty)(database, this._connection, observer);\n\n      this._connection.write(_requestMessage[\"default\"].run(query, parameters), observer, false);\n\n      this._connection.write(_requestMessage[\"default\"].pullAll(), observer, flush);\n\n      return observer;\n    }\n    /**\n     * Send a RESET through the underlying connection.\n     * @param {Object} param\n     * @param {function(err: Error)} param.onError the callback to invoke on error.\n     * @param {function()} param.onComplete the callback to invoke on completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          onError = _ref6.onError,\n          onComplete = _ref6.onComplete;\n\n      var observer = new _streamObservers.ResetObserver({\n        connection: this._connection,\n        onError: onError,\n        onComplete: onComplete\n      });\n\n      this._connection.write(_requestMessage[\"default\"].reset(), observer, true);\n\n      return observer;\n    }\n  }, {\n    key: \"_createPacker\",\n    value: function _createPacker(chunker) {\n      return new v1.Packer(chunker);\n    }\n  }, {\n    key: \"_createUnpacker\",\n    value: function _createUnpacker(disableLosslessIntegers) {\n      return new v1.Unpacker(disableLosslessIntegers);\n    }\n  }, {\n    key: \"version\",\n    get: function get() {\n      return _constants.BOLT_PROTOCOL_V1;\n    }\n  }]);\n  return BoltProtocol;\n}();\n\nexports[\"default\"] = BoltProtocol;"]},"metadata":{},"sourceType":"script"}