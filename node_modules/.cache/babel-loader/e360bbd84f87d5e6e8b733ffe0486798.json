{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.queryType = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _integer = require(\"./integer\");\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\n\n\nvar ResultSummary = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {string} query - The query this summary is for\n   * @param {Object} parameters - Parameters for the query\n   * @param {Object} metadata - Query metadata\n   */\n  function ResultSummary(query, parameters, metadata) {\n    (0, _classCallCheck2[\"default\"])(this, ResultSummary);\n    /**\n     * The query and parameters this summary is for.\n     * @type {{text: string, parameters: Object}}\n     * @public\n     */\n\n    this.query = {\n      text: query,\n      parameters: parameters\n      /**\n       * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\n       * \"w\" for write-only query and \"s\" for schema-write query.\n       * String constants are available in {@link queryType} object.\n       * @type {string}\n       * @public\n       */\n\n    };\n    this.queryType = metadata.type;\n    /**\n     * Counters for operations the query triggered.\n     * @type {QueryStatistics}\n     * @public\n     */\n\n    this.counters = new QueryStatistics(metadata.stats || {}); // for backwards compatibility, remove in future version\n\n    /**\n     * Use {@link ResultSummary.counters} instead.\n     * @type {QueryStatistics}\n     * @deprecated\n     */\n\n    this.updateStatistics = this.counters;\n    /**\n     * This describes how the database will execute the query.\n     * Query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"EXPLAIN\".\n     * @type {Plan}\n     * @public\n     */\n\n    this.plan = metadata.plan || metadata.profile ? new Plan(metadata.plan || metadata.profile) : false;\n    /**\n     * This describes how the database did execute your query. This will contain detailed information about what\n     * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"PROFILE\".\n     * @type {ProfiledPlan}\n     * @public\n     */\n\n    this.profile = metadata.profile ? new ProfiledPlan(metadata.profile) : false;\n    /**\n     * An array of notifications that might arise when executing the query. Notifications can be warnings about\n     * problematic queries or other valuable information that can be presented in a client. Unlike failures\n     * or errors, notifications do not affect the execution of a query.\n     * @type {Array<Notification>}\n     * @public\n     */\n\n    this.notifications = this._buildNotifications(metadata.notifications);\n    /**\n     * The basic information of the server where the result is obtained from.\n     * @type {ServerInfo}\n     * @public\n     */\n\n    this.server = new ServerInfo(metadata.server);\n    /**\n     * The time it took the server to consume the result.\n     * @type {number}\n     * @public\n     */\n\n    this.resultConsumedAfter = metadata.result_consumed_after;\n    /**\n     * The time it took the server to make the result available for consumption in milliseconds.\n     * @type {number}\n     * @public\n     */\n\n    this.resultAvailableAfter = metadata.result_available_after;\n    /**\n     * The database name where this summary is obtained from.\n     * @type {{name: string}}\n     * @public\n     */\n\n    this.database = {\n      name: metadata.db || null\n    };\n  }\n\n  (0, _createClass2[\"default\"])(ResultSummary, [{\n    key: \"_buildNotifications\",\n    value: function _buildNotifications(notifications) {\n      if (!notifications) {\n        return [];\n      }\n\n      return notifications.map(function (n) {\n        return new Notification(n);\n      });\n    }\n    /**\n     * Check if the result summary has a plan\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"hasPlan\",\n    value: function hasPlan() {\n      return this.plan instanceof Plan;\n    }\n    /**\n     * Check if the result summary has a profile\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"hasProfile\",\n    value: function hasProfile() {\n      return this.profile instanceof ProfiledPlan;\n    }\n  }]);\n  return ResultSummary;\n}();\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\n\n\nvar Plan =\n/**\n * Create a Plan instance\n * @constructor\n * @param {Object} plan - Object with plan data\n */\nfunction Plan(plan) {\n  (0, _classCallCheck2[\"default\"])(this, Plan);\n  this.operatorType = plan.operatorType;\n  this.identifiers = plan.identifiers;\n  this.arguments = plan.args;\n  this.children = plan.children ? plan.children.map(function (child) {\n    return new Plan(child);\n  }) : [];\n};\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\n\n\nvar ProfiledPlan = /*#__PURE__*/function () {\n  /**\n   * Create a ProfiledPlan instance\n   * @constructor\n   * @param {Object} profile - Object with profile data\n   */\n  function ProfiledPlan(profile) {\n    (0, _classCallCheck2[\"default\"])(this, ProfiledPlan);\n    this.operatorType = profile.operatorType;\n    this.identifiers = profile.identifiers;\n    this.arguments = profile.args;\n    this.dbHits = valueOrDefault('dbHits', profile);\n    this.rows = valueOrDefault('rows', profile);\n    this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n    this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n    this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n    this.time = valueOrDefault('time', profile);\n    this.children = profile.children ? profile.children.map(function (child) {\n      return new ProfiledPlan(child);\n    }) : [];\n  }\n\n  (0, _createClass2[\"default\"])(ProfiledPlan, [{\n    key: \"hasPageCacheStats\",\n    value: function hasPageCacheStats() {\n      return this.pageCacheMisses > 0 || this.pageCacheHits > 0 || this.pageCacheHitRatio > 0;\n    }\n  }]);\n  return ProfiledPlan;\n}();\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\n\n\nvar QueryStatistics = /*#__PURE__*/function () {\n  /**\n   * Structurize the statistics\n   * @constructor\n   * @param {Object} statistics - Result statistics\n   */\n  function QueryStatistics(statistics) {\n    var _this = this;\n\n    (0, _classCallCheck2[\"default\"])(this, QueryStatistics);\n    this._stats = {\n      nodesCreated: 0,\n      nodesDeleted: 0,\n      relationshipsCreated: 0,\n      relationshipsDeleted: 0,\n      propertiesSet: 0,\n      labelsAdded: 0,\n      labelsRemoved: 0,\n      indexesAdded: 0,\n      indexesRemoved: 0,\n      constraintsAdded: 0,\n      constraintsRemoved: 0\n    };\n    this._systemUpdates = 0;\n    Object.keys(statistics).forEach(function (index) {\n      // To camelCase\n      var camelCaseIndex = index.replace(/(-\\w)/g, function (m) {\n        return m[1].toUpperCase();\n      });\n\n      if (camelCaseIndex in _this._stats) {\n        _this._stats[camelCaseIndex] = intValue(statistics[index]);\n      } else if (camelCaseIndex === 'systemUpdates') {\n        _this._systemUpdates = intValue(statistics[index]);\n      }\n    });\n    this._stats = Object.freeze(this._stats);\n  }\n  /**\n   * Did the database get updated?\n   * @return {boolean}\n   */\n\n\n  (0, _createClass2[\"default\"])(QueryStatistics, [{\n    key: \"containsUpdates\",\n    value: function containsUpdates() {\n      var _this2 = this;\n\n      return Object.keys(this._stats).reduce(function (last, current) {\n        return last + _this2._stats[current];\n      }, 0) > 0;\n    }\n    /**\n     * Returns the query statistics updates in a dictionary.\n     * @returns {*}\n     */\n\n  }, {\n    key: \"updates\",\n    value: function updates() {\n      return this._stats;\n    }\n    /**\n     * Return true if the system database get updated, otherwise false\n     * @returns {boolean} - If the system database get updated or not.\n     */\n\n  }, {\n    key: \"containsSystemUpdates\",\n    value: function containsSystemUpdates() {\n      return this._systemUpdates > 0;\n    }\n    /**\n     * @returns {number} - Number of system updates\n     */\n\n  }, {\n    key: \"systemUpdates\",\n    value: function systemUpdates() {\n      return this._systemUpdates;\n    }\n  }]);\n  return QueryStatistics;\n}();\n/**\n * Class for Cypher notifications\n * @access public\n */\n\n\nvar Notification = /*#__PURE__*/function () {\n  /**\n   * Create a Notification instance\n   * @constructor\n   * @param {Object} notification - Object with notification data\n   */\n  function Notification(notification) {\n    (0, _classCallCheck2[\"default\"])(this, Notification);\n    this.code = notification.code;\n    this.title = notification.title;\n    this.description = notification.description;\n    this.severity = notification.severity;\n    this.position = Notification._constructPosition(notification.position);\n  }\n\n  (0, _createClass2[\"default\"])(Notification, null, [{\n    key: \"_constructPosition\",\n    value: function _constructPosition(pos) {\n      if (!pos) {\n        return {};\n      }\n\n      return {\n        offset: intValue(pos.offset),\n        line: intValue(pos.line),\n        column: intValue(pos.column)\n      };\n    }\n  }]);\n  return Notification;\n}();\n/**\n * Class for exposing server info from a result.\n * @access public\n */\n\n\nvar ServerInfo =\n/**\n * Create a ServerInfo instance\n * @constructor\n * @param {Object} serverMeta - Object with serverMeta data\n */\nfunction ServerInfo(serverMeta) {\n  (0, _classCallCheck2[\"default\"])(this, ServerInfo);\n\n  if (serverMeta) {\n    this.address = serverMeta.address;\n    this.version = serverMeta.version;\n  }\n};\n\nfunction intValue(value) {\n  return (0, _integer.isInt)(value) ? value.toInt() : value;\n}\n\nfunction valueOrDefault(key, values) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (key in values) {\n    var value = values[key];\n    return (0, _integer.isInt)(value) ? value.toInt() : value;\n  } else {\n    return defaultValue;\n  }\n}\n/**\n * The constants for query types\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\n */\n\n\nvar queryType = {\n  READ_ONLY: 'r',\n  READ_WRITE: 'rw',\n  WRITE_ONLY: 'w',\n  SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nvar _default = ResultSummary;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["d:/webback/pro5/node_modules/neo4j-driver/lib/result-summary.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","queryType","_classCallCheck2","_createClass2","_integer","ResultSummary","query","parameters","metadata","text","type","counters","QueryStatistics","stats","updateStatistics","plan","profile","Plan","ProfiledPlan","notifications","_buildNotifications","server","ServerInfo","resultConsumedAfter","result_consumed_after","resultAvailableAfter","result_available_after","database","name","db","key","map","n","Notification","hasPlan","hasProfile","operatorType","identifiers","arguments","args","children","child","dbHits","valueOrDefault","rows","pageCacheMisses","pageCacheHits","pageCacheHitRatio","time","hasPageCacheStats","statistics","_this","_stats","nodesCreated","nodesDeleted","relationshipsCreated","relationshipsDeleted","propertiesSet","labelsAdded","labelsRemoved","indexesAdded","indexesRemoved","constraintsAdded","constraintsRemoved","_systemUpdates","keys","forEach","index","camelCaseIndex","replace","m","toUpperCase","intValue","freeze","containsUpdates","_this2","reduce","last","current","updates","containsSystemUpdates","systemUpdates","notification","code","title","description","severity","position","_constructPosition","pos","offset","line","column","serverMeta","address","version","isInt","toInt","values","defaultValue","length","undefined","READ_ONLY","READ_WRITE","WRITE_ONLY","SCHEMA_WRITE","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBA,OAAO,CAACE,SAAR,GAAoB,KAAK,CAA9C;;AAEA,IAAIC,gBAAgB,GAAGP,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAA7C;;AAEA,IAAIO,aAAa,GAAGR,sBAAsB,CAACC,OAAO,CAAC,oCAAD,CAAR,CAA1C;;AAEA,IAAIQ,QAAQ,GAAGR,OAAO,CAAC,WAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,IAAIS,aAAa,GACjB,aACA,YAAY;AACV;AACF;AACA;AACA;AACA;AACA;AACE,WAASA,aAAT,CAAuBC,KAAvB,EAA8BC,UAA9B,EAA0CC,QAA1C,EAAoD;AAClD,KAAC,GAAGN,gBAAgB,CAAC,SAAD,CAApB,EAAiC,IAAjC,EAAuCG,aAAvC;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,KAAL,GAAa;AACXG,MAAAA,IAAI,EAAEH,KADK;AAEXC,MAAAA,UAAU,EAAEA;AACZ;AACN;AACA;AACA;AACA;AACA;AACA;;AATiB,KAAb;AAYA,SAAKN,SAAL,GAAiBO,QAAQ,CAACE,IAA1B;AACA;AACJ;AACA;AACA;AACA;;AAEI,SAAKC,QAAL,GAAgB,IAAIC,eAAJ,CAAoBJ,QAAQ,CAACK,KAAT,IAAkB,EAAtC,CAAhB,CA3BkD,CA2BS;;AAE3D;AACJ;AACA;AACA;AACA;;AAEI,SAAKC,gBAAL,GAAwB,KAAKH,QAA7B;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI,SAAKI,IAAL,GAAYP,QAAQ,CAACO,IAAT,IAAiBP,QAAQ,CAACQ,OAA1B,GAAoC,IAAIC,IAAJ,CAAST,QAAQ,CAACO,IAAT,IAAiBP,QAAQ,CAACQ,OAAnC,CAApC,GAAkF,KAA9F;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI,SAAKA,OAAL,GAAeR,QAAQ,CAACQ,OAAT,GAAmB,IAAIE,YAAJ,CAAiBV,QAAQ,CAACQ,OAA1B,CAAnB,GAAwD,KAAvE;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI,SAAKG,aAAL,GAAqB,KAAKC,mBAAL,CAAyBZ,QAAQ,CAACW,aAAlC,CAArB;AACA;AACJ;AACA;AACA;AACA;;AAEI,SAAKE,MAAL,GAAc,IAAIC,UAAJ,CAAed,QAAQ,CAACa,MAAxB,CAAd;AACA;AACJ;AACA;AACA;AACA;;AAEI,SAAKE,mBAAL,GAA2Bf,QAAQ,CAACgB,qBAApC;AACA;AACJ;AACA;AACA;AACA;;AAEI,SAAKC,oBAAL,GAA4BjB,QAAQ,CAACkB,sBAArC;AACA;AACJ;AACA;AACA;AACA;;AAEI,SAAKC,QAAL,GAAgB;AACdC,MAAAA,IAAI,EAAEpB,QAAQ,CAACqB,EAAT,IAAe;AADP,KAAhB;AAGD;;AAED,GAAC,GAAG1B,aAAa,CAAC,SAAD,CAAjB,EAA8BE,aAA9B,EAA6C,CAAC;AAC5CyB,IAAAA,GAAG,EAAE,qBADuC;AAE5C9B,IAAAA,KAAK,EAAE,SAASoB,mBAAT,CAA6BD,aAA7B,EAA4C;AACjD,UAAI,CAACA,aAAL,EAAoB;AAClB,eAAO,EAAP;AACD;;AAED,aAAOA,aAAa,CAACY,GAAd,CAAkB,UAAUC,CAAV,EAAa;AACpC,eAAO,IAAIC,YAAJ,CAAiBD,CAAjB,CAAP;AACD,OAFM,CAAP;AAGD;AACD;AACJ;AACA;AACA;;AAdgD,GAAD,EAgB1C;AACDF,IAAAA,GAAG,EAAE,SADJ;AAED9B,IAAAA,KAAK,EAAE,SAASkC,OAAT,GAAmB;AACxB,aAAO,KAAKnB,IAAL,YAAqBE,IAA5B;AACD;AACD;AACJ;AACA;AACA;;AARK,GAhB0C,EA0B1C;AACDa,IAAAA,GAAG,EAAE,YADJ;AAED9B,IAAAA,KAAK,EAAE,SAASmC,UAAT,GAAsB;AAC3B,aAAO,KAAKnB,OAAL,YAAwBE,YAA/B;AACD;AAJA,GA1B0C,CAA7C;AAgCA,SAAOb,aAAP;AACD,CAvID,EAFA;AA0IA;AACA;AACA;AACA;;;AAGA,IAAIY,IAAI;AACR;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,CAAcF,IAAd,EAAoB;AAClB,GAAC,GAAGb,gBAAgB,CAAC,SAAD,CAApB,EAAiC,IAAjC,EAAuCe,IAAvC;AACA,OAAKmB,YAAL,GAAoBrB,IAAI,CAACqB,YAAzB;AACA,OAAKC,WAAL,GAAmBtB,IAAI,CAACsB,WAAxB;AACA,OAAKC,SAAL,GAAiBvB,IAAI,CAACwB,IAAtB;AACA,OAAKC,QAAL,GAAgBzB,IAAI,CAACyB,QAAL,GAAgBzB,IAAI,CAACyB,QAAL,CAAcT,GAAd,CAAkB,UAAUU,KAAV,EAAiB;AACjE,WAAO,IAAIxB,IAAJ,CAASwB,KAAT,CAAP;AACD,GAF+B,CAAhB,GAEX,EAFL;AAGD,CAdD;AAeA;AACA;AACA;AACA;;;AAGA,IAAIvB,YAAY,GAChB,aACA,YAAY;AACV;AACF;AACA;AACA;AACA;AACE,WAASA,YAAT,CAAsBF,OAAtB,EAA+B;AAC7B,KAAC,GAAGd,gBAAgB,CAAC,SAAD,CAApB,EAAiC,IAAjC,EAAuCgB,YAAvC;AACA,SAAKkB,YAAL,GAAoBpB,OAAO,CAACoB,YAA5B;AACA,SAAKC,WAAL,GAAmBrB,OAAO,CAACqB,WAA3B;AACA,SAAKC,SAAL,GAAiBtB,OAAO,CAACuB,IAAzB;AACA,SAAKG,MAAL,GAAcC,cAAc,CAAC,QAAD,EAAW3B,OAAX,CAA5B;AACA,SAAK4B,IAAL,GAAYD,cAAc,CAAC,MAAD,EAAS3B,OAAT,CAA1B;AACA,SAAK6B,eAAL,GAAuBF,cAAc,CAAC,iBAAD,EAAoB3B,OAApB,CAArC;AACA,SAAK8B,aAAL,GAAqBH,cAAc,CAAC,eAAD,EAAkB3B,OAAlB,CAAnC;AACA,SAAK+B,iBAAL,GAAyBJ,cAAc,CAAC,mBAAD,EAAsB3B,OAAtB,CAAvC;AACA,SAAKgC,IAAL,GAAYL,cAAc,CAAC,MAAD,EAAS3B,OAAT,CAA1B;AACA,SAAKwB,QAAL,GAAgBxB,OAAO,CAACwB,QAAR,GAAmBxB,OAAO,CAACwB,QAAR,CAAiBT,GAAjB,CAAqB,UAAUU,KAAV,EAAiB;AACvE,aAAO,IAAIvB,YAAJ,CAAiBuB,KAAjB,CAAP;AACD,KAFkC,CAAnB,GAEX,EAFL;AAGD;;AAED,GAAC,GAAGtC,aAAa,CAAC,SAAD,CAAjB,EAA8Be,YAA9B,EAA4C,CAAC;AAC3CY,IAAAA,GAAG,EAAE,mBADsC;AAE3C9B,IAAAA,KAAK,EAAE,SAASiD,iBAAT,GAA6B;AAClC,aAAO,KAAKJ,eAAL,GAAuB,CAAvB,IAA4B,KAAKC,aAAL,GAAqB,CAAjD,IAAsD,KAAKC,iBAAL,GAAyB,CAAtF;AACD;AAJ0C,GAAD,CAA5C;AAMA,SAAO7B,YAAP;AACD,CA7BD,EAFA;AAgCA;AACA;AACA;AACA;;;AAGA,IAAIN,eAAe,GACnB,aACA,YAAY;AACV;AACF;AACA;AACA;AACA;AACE,WAASA,eAAT,CAAyBsC,UAAzB,EAAqC;AACnC,QAAIC,KAAK,GAAG,IAAZ;;AAEA,KAAC,GAAGjD,gBAAgB,CAAC,SAAD,CAApB,EAAiC,IAAjC,EAAuCU,eAAvC;AACA,SAAKwC,MAAL,GAAc;AACZC,MAAAA,YAAY,EAAE,CADF;AAEZC,MAAAA,YAAY,EAAE,CAFF;AAGZC,MAAAA,oBAAoB,EAAE,CAHV;AAIZC,MAAAA,oBAAoB,EAAE,CAJV;AAKZC,MAAAA,aAAa,EAAE,CALH;AAMZC,MAAAA,WAAW,EAAE,CAND;AAOZC,MAAAA,aAAa,EAAE,CAPH;AAQZC,MAAAA,YAAY,EAAE,CARF;AASZC,MAAAA,cAAc,EAAE,CATJ;AAUZC,MAAAA,gBAAgB,EAAE,CAVN;AAWZC,MAAAA,kBAAkB,EAAE;AAXR,KAAd;AAaA,SAAKC,cAAL,GAAsB,CAAtB;AACAnE,IAAAA,MAAM,CAACoE,IAAP,CAAYf,UAAZ,EAAwBgB,OAAxB,CAAgC,UAAUC,KAAV,EAAiB;AAC/C;AACA,UAAIC,cAAc,GAAGD,KAAK,CAACE,OAAN,CAAc,QAAd,EAAwB,UAAUC,CAAV,EAAa;AACxD,eAAOA,CAAC,CAAC,CAAD,CAAD,CAAKC,WAAL,EAAP;AACD,OAFoB,CAArB;;AAIA,UAAIH,cAAc,IAAIjB,KAAK,CAACC,MAA5B,EAAoC;AAClCD,QAAAA,KAAK,CAACC,MAAN,CAAagB,cAAb,IAA+BI,QAAQ,CAACtB,UAAU,CAACiB,KAAD,CAAX,CAAvC;AACD,OAFD,MAEO,IAAIC,cAAc,KAAK,eAAvB,EAAwC;AAC7CjB,QAAAA,KAAK,CAACa,cAAN,GAAuBQ,QAAQ,CAACtB,UAAU,CAACiB,KAAD,CAAX,CAA/B;AACD;AACF,KAXD;AAYA,SAAKf,MAAL,GAAcvD,MAAM,CAAC4E,MAAP,CAAc,KAAKrB,MAAnB,CAAd;AACD;AACD;AACF;AACA;AACA;;;AAGE,GAAC,GAAGjD,aAAa,CAAC,SAAD,CAAjB,EAA8BS,eAA9B,EAA+C,CAAC;AAC9CkB,IAAAA,GAAG,EAAE,iBADyC;AAE9C9B,IAAAA,KAAK,EAAE,SAAS0E,eAAT,GAA2B;AAChC,UAAIC,MAAM,GAAG,IAAb;;AAEA,aAAO9E,MAAM,CAACoE,IAAP,CAAY,KAAKb,MAAjB,EAAyBwB,MAAzB,CAAgC,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AAC9D,eAAOD,IAAI,GAAGF,MAAM,CAACvB,MAAP,CAAc0B,OAAd,CAAd;AACD,OAFM,EAEJ,CAFI,IAEC,CAFR;AAGD;AACD;AACJ;AACA;AACA;;AAZkD,GAAD,EAc5C;AACDhD,IAAAA,GAAG,EAAE,SADJ;AAED9B,IAAAA,KAAK,EAAE,SAAS+E,OAAT,GAAmB;AACxB,aAAO,KAAK3B,MAAZ;AACD;AACD;AACJ;AACA;AACA;;AARK,GAd4C,EAwB5C;AACDtB,IAAAA,GAAG,EAAE,uBADJ;AAED9B,IAAAA,KAAK,EAAE,SAASgF,qBAAT,GAAiC;AACtC,aAAO,KAAKhB,cAAL,GAAsB,CAA7B;AACD;AACD;AACJ;AACA;;AAPK,GAxB4C,EAiC5C;AACDlC,IAAAA,GAAG,EAAE,eADJ;AAED9B,IAAAA,KAAK,EAAE,SAASiF,aAAT,GAAyB;AAC9B,aAAO,KAAKjB,cAAZ;AACD;AAJA,GAjC4C,CAA/C;AAuCA,SAAOpD,eAAP;AACD,CApFD,EAFA;AAuFA;AACA;AACA;AACA;;;AAGA,IAAIqB,YAAY,GAChB,aACA,YAAY;AACV;AACF;AACA;AACA;AACA;AACE,WAASA,YAAT,CAAsBiD,YAAtB,EAAoC;AAClC,KAAC,GAAGhF,gBAAgB,CAAC,SAAD,CAApB,EAAiC,IAAjC,EAAuC+B,YAAvC;AACA,SAAKkD,IAAL,GAAYD,YAAY,CAACC,IAAzB;AACA,SAAKC,KAAL,GAAaF,YAAY,CAACE,KAA1B;AACA,SAAKC,WAAL,GAAmBH,YAAY,CAACG,WAAhC;AACA,SAAKC,QAAL,GAAgBJ,YAAY,CAACI,QAA7B;AACA,SAAKC,QAAL,GAAgBtD,YAAY,CAACuD,kBAAb,CAAgCN,YAAY,CAACK,QAA7C,CAAhB;AACD;;AAED,GAAC,GAAGpF,aAAa,CAAC,SAAD,CAAjB,EAA8B8B,YAA9B,EAA4C,IAA5C,EAAkD,CAAC;AACjDH,IAAAA,GAAG,EAAE,oBAD4C;AAEjD9B,IAAAA,KAAK,EAAE,SAASwF,kBAAT,CAA4BC,GAA5B,EAAiC;AACtC,UAAI,CAACA,GAAL,EAAU;AACR,eAAO,EAAP;AACD;;AAED,aAAO;AACLC,QAAAA,MAAM,EAAElB,QAAQ,CAACiB,GAAG,CAACC,MAAL,CADX;AAELC,QAAAA,IAAI,EAAEnB,QAAQ,CAACiB,GAAG,CAACE,IAAL,CAFT;AAGLC,QAAAA,MAAM,EAAEpB,QAAQ,CAACiB,GAAG,CAACG,MAAL;AAHX,OAAP;AAKD;AAZgD,GAAD,CAAlD;AAcA,SAAO3D,YAAP;AACD,CA9BD,EAFA;AAiCA;AACA;AACA;AACA;;;AAGA,IAAIX,UAAU;AACd;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,CAAoBuE,UAApB,EAAgC;AAC9B,GAAC,GAAG3F,gBAAgB,CAAC,SAAD,CAApB,EAAiC,IAAjC,EAAuCoB,UAAvC;;AAEA,MAAIuE,UAAJ,EAAgB;AACd,SAAKC,OAAL,GAAeD,UAAU,CAACC,OAA1B;AACA,SAAKC,OAAL,GAAeF,UAAU,CAACE,OAA1B;AACD;AACF,CAbD;;AAeA,SAASvB,QAAT,CAAkBxE,KAAlB,EAAyB;AACvB,SAAO,CAAC,GAAGI,QAAQ,CAAC4F,KAAb,EAAoBhG,KAApB,IAA6BA,KAAK,CAACiG,KAAN,EAA7B,GAA6CjG,KAApD;AACD;;AAED,SAAS2C,cAAT,CAAwBb,GAAxB,EAA6BoE,MAA7B,EAAqC;AACnC,MAAIC,YAAY,GAAG7D,SAAS,CAAC8D,MAAV,GAAmB,CAAnB,IAAwB9D,SAAS,CAAC,CAAD,CAAT,KAAiB+D,SAAzC,GAAqD/D,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAvF;;AAEA,MAAIR,GAAG,IAAIoE,MAAX,EAAmB;AACjB,QAAIlG,KAAK,GAAGkG,MAAM,CAACpE,GAAD,CAAlB;AACA,WAAO,CAAC,GAAG1B,QAAQ,CAAC4F,KAAb,EAAoBhG,KAApB,IAA6BA,KAAK,CAACiG,KAAN,EAA7B,GAA6CjG,KAApD;AACD,GAHD,MAGO;AACL,WAAOmG,YAAP;AACD;AACF;AACD;AACA;AACA;AACA;;;AAGA,IAAIlG,SAAS,GAAG;AACdqG,EAAAA,SAAS,EAAE,GADG;AAEdC,EAAAA,UAAU,EAAE,IAFE;AAGdC,EAAAA,UAAU,EAAE,GAHE;AAIdC,EAAAA,YAAY,EAAE;AAJA,CAAhB;AAMA1G,OAAO,CAACE,SAAR,GAAoBA,SAApB;AACA,IAAIyG,QAAQ,GAAGrG,aAAf;AACAN,OAAO,CAAC,SAAD,CAAP,GAAqB2G,QAArB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.queryType = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _integer = require(\"./integer\");\n\n/**\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\nvar ResultSummary =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {string} query - The query this summary is for\n   * @param {Object} parameters - Parameters for the query\n   * @param {Object} metadata - Query metadata\n   */\n  function ResultSummary(query, parameters, metadata) {\n    (0, _classCallCheck2[\"default\"])(this, ResultSummary);\n\n    /**\n     * The query and parameters this summary is for.\n     * @type {{text: string, parameters: Object}}\n     * @public\n     */\n    this.query = {\n      text: query,\n      parameters: parameters\n      /**\n       * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\n       * \"w\" for write-only query and \"s\" for schema-write query.\n       * String constants are available in {@link queryType} object.\n       * @type {string}\n       * @public\n       */\n\n    };\n    this.queryType = metadata.type;\n    /**\n     * Counters for operations the query triggered.\n     * @type {QueryStatistics}\n     * @public\n     */\n\n    this.counters = new QueryStatistics(metadata.stats || {}); // for backwards compatibility, remove in future version\n\n    /**\n     * Use {@link ResultSummary.counters} instead.\n     * @type {QueryStatistics}\n     * @deprecated\n     */\n\n    this.updateStatistics = this.counters;\n    /**\n     * This describes how the database will execute the query.\n     * Query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"EXPLAIN\".\n     * @type {Plan}\n     * @public\n     */\n\n    this.plan = metadata.plan || metadata.profile ? new Plan(metadata.plan || metadata.profile) : false;\n    /**\n     * This describes how the database did execute your query. This will contain detailed information about what\n     * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"PROFILE\".\n     * @type {ProfiledPlan}\n     * @public\n     */\n\n    this.profile = metadata.profile ? new ProfiledPlan(metadata.profile) : false;\n    /**\n     * An array of notifications that might arise when executing the query. Notifications can be warnings about\n     * problematic queries or other valuable information that can be presented in a client. Unlike failures\n     * or errors, notifications do not affect the execution of a query.\n     * @type {Array<Notification>}\n     * @public\n     */\n\n    this.notifications = this._buildNotifications(metadata.notifications);\n    /**\n     * The basic information of the server where the result is obtained from.\n     * @type {ServerInfo}\n     * @public\n     */\n\n    this.server = new ServerInfo(metadata.server);\n    /**\n     * The time it took the server to consume the result.\n     * @type {number}\n     * @public\n     */\n\n    this.resultConsumedAfter = metadata.result_consumed_after;\n    /**\n     * The time it took the server to make the result available for consumption in milliseconds.\n     * @type {number}\n     * @public\n     */\n\n    this.resultAvailableAfter = metadata.result_available_after;\n    /**\n     * The database name where this summary is obtained from.\n     * @type {{name: string}}\n     * @public\n     */\n\n    this.database = {\n      name: metadata.db || null\n    };\n  }\n\n  (0, _createClass2[\"default\"])(ResultSummary, [{\n    key: \"_buildNotifications\",\n    value: function _buildNotifications(notifications) {\n      if (!notifications) {\n        return [];\n      }\n\n      return notifications.map(function (n) {\n        return new Notification(n);\n      });\n    }\n    /**\n     * Check if the result summary has a plan\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"hasPlan\",\n    value: function hasPlan() {\n      return this.plan instanceof Plan;\n    }\n    /**\n     * Check if the result summary has a profile\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"hasProfile\",\n    value: function hasProfile() {\n      return this.profile instanceof ProfiledPlan;\n    }\n  }]);\n  return ResultSummary;\n}();\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\n\n\nvar Plan =\n/**\n * Create a Plan instance\n * @constructor\n * @param {Object} plan - Object with plan data\n */\nfunction Plan(plan) {\n  (0, _classCallCheck2[\"default\"])(this, Plan);\n  this.operatorType = plan.operatorType;\n  this.identifiers = plan.identifiers;\n  this.arguments = plan.args;\n  this.children = plan.children ? plan.children.map(function (child) {\n    return new Plan(child);\n  }) : [];\n};\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\n\n\nvar ProfiledPlan =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a ProfiledPlan instance\n   * @constructor\n   * @param {Object} profile - Object with profile data\n   */\n  function ProfiledPlan(profile) {\n    (0, _classCallCheck2[\"default\"])(this, ProfiledPlan);\n    this.operatorType = profile.operatorType;\n    this.identifiers = profile.identifiers;\n    this.arguments = profile.args;\n    this.dbHits = valueOrDefault('dbHits', profile);\n    this.rows = valueOrDefault('rows', profile);\n    this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n    this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n    this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n    this.time = valueOrDefault('time', profile);\n    this.children = profile.children ? profile.children.map(function (child) {\n      return new ProfiledPlan(child);\n    }) : [];\n  }\n\n  (0, _createClass2[\"default\"])(ProfiledPlan, [{\n    key: \"hasPageCacheStats\",\n    value: function hasPageCacheStats() {\n      return this.pageCacheMisses > 0 || this.pageCacheHits > 0 || this.pageCacheHitRatio > 0;\n    }\n  }]);\n  return ProfiledPlan;\n}();\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\n\n\nvar QueryStatistics =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Structurize the statistics\n   * @constructor\n   * @param {Object} statistics - Result statistics\n   */\n  function QueryStatistics(statistics) {\n    var _this = this;\n\n    (0, _classCallCheck2[\"default\"])(this, QueryStatistics);\n    this._stats = {\n      nodesCreated: 0,\n      nodesDeleted: 0,\n      relationshipsCreated: 0,\n      relationshipsDeleted: 0,\n      propertiesSet: 0,\n      labelsAdded: 0,\n      labelsRemoved: 0,\n      indexesAdded: 0,\n      indexesRemoved: 0,\n      constraintsAdded: 0,\n      constraintsRemoved: 0\n    };\n    this._systemUpdates = 0;\n    Object.keys(statistics).forEach(function (index) {\n      // To camelCase\n      var camelCaseIndex = index.replace(/(-\\w)/g, function (m) {\n        return m[1].toUpperCase();\n      });\n\n      if (camelCaseIndex in _this._stats) {\n        _this._stats[camelCaseIndex] = intValue(statistics[index]);\n      } else if (camelCaseIndex === 'systemUpdates') {\n        _this._systemUpdates = intValue(statistics[index]);\n      }\n    });\n    this._stats = Object.freeze(this._stats);\n  }\n  /**\n   * Did the database get updated?\n   * @return {boolean}\n   */\n\n\n  (0, _createClass2[\"default\"])(QueryStatistics, [{\n    key: \"containsUpdates\",\n    value: function containsUpdates() {\n      var _this2 = this;\n\n      return Object.keys(this._stats).reduce(function (last, current) {\n        return last + _this2._stats[current];\n      }, 0) > 0;\n    }\n    /**\n     * Returns the query statistics updates in a dictionary.\n     * @returns {*}\n     */\n\n  }, {\n    key: \"updates\",\n    value: function updates() {\n      return this._stats;\n    }\n    /**\n     * Return true if the system database get updated, otherwise false\n     * @returns {boolean} - If the system database get updated or not.\n     */\n\n  }, {\n    key: \"containsSystemUpdates\",\n    value: function containsSystemUpdates() {\n      return this._systemUpdates > 0;\n    }\n    /**\n     * @returns {number} - Number of system updates\n     */\n\n  }, {\n    key: \"systemUpdates\",\n    value: function systemUpdates() {\n      return this._systemUpdates;\n    }\n  }]);\n  return QueryStatistics;\n}();\n/**\n * Class for Cypher notifications\n * @access public\n */\n\n\nvar Notification =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a Notification instance\n   * @constructor\n   * @param {Object} notification - Object with notification data\n   */\n  function Notification(notification) {\n    (0, _classCallCheck2[\"default\"])(this, Notification);\n    this.code = notification.code;\n    this.title = notification.title;\n    this.description = notification.description;\n    this.severity = notification.severity;\n    this.position = Notification._constructPosition(notification.position);\n  }\n\n  (0, _createClass2[\"default\"])(Notification, null, [{\n    key: \"_constructPosition\",\n    value: function _constructPosition(pos) {\n      if (!pos) {\n        return {};\n      }\n\n      return {\n        offset: intValue(pos.offset),\n        line: intValue(pos.line),\n        column: intValue(pos.column)\n      };\n    }\n  }]);\n  return Notification;\n}();\n/**\n * Class for exposing server info from a result.\n * @access public\n */\n\n\nvar ServerInfo =\n/**\n * Create a ServerInfo instance\n * @constructor\n * @param {Object} serverMeta - Object with serverMeta data\n */\nfunction ServerInfo(serverMeta) {\n  (0, _classCallCheck2[\"default\"])(this, ServerInfo);\n\n  if (serverMeta) {\n    this.address = serverMeta.address;\n    this.version = serverMeta.version;\n  }\n};\n\nfunction intValue(value) {\n  return (0, _integer.isInt)(value) ? value.toInt() : value;\n}\n\nfunction valueOrDefault(key, values) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (key in values) {\n    var value = values[key];\n    return (0, _integer.isInt)(value) ? value.toInt() : value;\n  } else {\n    return defaultValue;\n  }\n}\n/**\n * The constants for query types\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\n */\n\n\nvar queryType = {\n  READ_ONLY: 'r',\n  READ_WRITE: 'rw',\n  WRITE_ONLY: 'w',\n  SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nvar _default = ResultSummary;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}